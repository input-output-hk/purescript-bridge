-- File auto generated by purescript-bridge! --
module PlutusTx.AssocMap where

import Prelude

import ConstrIndices (class HasConstrIndices, constrIndices, fromConstr2Index)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (class Newtype)
import Data.Tuple (Tuple, Tuple(Tuple))
import FromData (class FromData, fromData, genericFromData)
import ToData (class ToData, genericToData, toData)
import Type.Proxy (Proxy(Proxy))

newtype Map a b = Map { unMap :: Array (Tuple a b) }

derive instance Generic (Map a b) _

derive instance Newtype (Map a b) _

instance HasConstrIndices (Map a b) where
  constrIndices _ = fromConstr2Index [Tuple "Map" 0]

instance (ToData a, ToData b) => ToData (Map a b) where
  toData x = genericToData x

instance (FromData a, FromData b) => FromData (Map a b) where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_Map :: forall a b. Iso' (Map a b) {unMap :: Array (Tuple a b)}
_Map = _Newtype
