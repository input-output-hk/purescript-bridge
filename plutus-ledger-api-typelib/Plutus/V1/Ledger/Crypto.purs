-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Crypto where

import Prelude

import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (class Newtype)
import Data.Show.Generic (genericShow)
import Data.Tuple (Tuple(Tuple))
import FromData (class FromData, genericFromData)
import Plutus.V1.Ledger.Bytes (LedgerBytes)
import ToData (class ToData, genericToData)
import Type.Proxy (Proxy(Proxy))
import TypeLevel.DataSchema
  ( ApPCons
  , Field
  , I
  , Id
  , IxK
  , MkField
  , MkField_
  , MkIxK
  , MkIxK_
  , PCons
  , PNil
  , PSchema
  , class HasPlutusSchema
  , type (:+)
  , type (:=)
  , type (@@)
  )
import Types.ByteArray (ByteArray)

newtype PubKey = PubKey { getPubKey :: LedgerBytes }

instance Show PubKey where
  show a = genericShow a

derive instance Generic PubKey _

derive instance Newtype PubKey _

instance
  HasPlutusSchema PubKey
    ( "PubKey"
        :=
          ( "getPubKey" := I LedgerBytes
              :+ PNil
          )
        @@ (Z)
        :+ PNil
    )

instance ToData PubKey where
  toData x = genericToData x

instance FromData PubKey where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_PubKey :: Iso' PubKey { getPubKey :: LedgerBytes }
_PubKey = _Newtype

--------------------------------------------------------------------------------

newtype PubKeyHash = PubKeyHash { getPubKeyHash :: ByteArray }

instance Show PubKeyHash where
  show a = genericShow a

derive instance Generic PubKeyHash _

derive instance Newtype PubKeyHash _

instance
  HasPlutusSchema PubKeyHash
    ( "PubKeyHash"
        :=
          ( "getPubKeyHash" := I ByteArray
              :+ PNil
          )
        @@ (Z)
        :+ PNil
    )

instance ToData PubKeyHash where
  toData x = genericToData x

instance FromData PubKeyHash where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_PubKeyHash :: Iso' PubKeyHash { getPubKeyHash :: ByteArray }
_PubKeyHash = _Newtype

--------------------------------------------------------------------------------

newtype PrivateKey = PrivateKey { getPrivateKey :: LedgerBytes }

instance Show PrivateKey where
  show a = genericShow a

derive instance Generic PrivateKey _

derive instance Newtype PrivateKey _

instance
  HasPlutusSchema PrivateKey
    ( "PrivateKey"
        :=
          ( "getPrivateKey" := I LedgerBytes
              :+ PNil
          )
        @@ (Z)
        :+ PNil
    )

instance ToData PrivateKey where
  toData x = genericToData x

instance FromData PrivateKey where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_PrivateKey :: Iso' PrivateKey { getPrivateKey :: LedgerBytes }
_PrivateKey = _Newtype

--------------------------------------------------------------------------------

newtype Signature = Signature { getSignature :: ByteArray }

instance Show Signature where
  show a = genericShow a

derive instance Generic Signature _

derive instance Newtype Signature _

instance
  HasPlutusSchema Signature
    ( "Signature"
        :=
          ( "getSignature" := I ByteArray
              :+ PNil
          )
        @@ (Z)
        :+ PNil
    )

instance ToData Signature where
  toData x = genericToData x

instance FromData Signature where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_Signature :: Iso' Signature { getSignature :: ByteArray }
_Signature = _Newtype
