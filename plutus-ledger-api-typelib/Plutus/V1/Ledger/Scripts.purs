-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Scripts where

import Prelude

import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (class Newtype)
import Data.Show.Generic (genericShow)
import Data.Tuple (Tuple(Tuple))
import FromData (class FromData, genericFromData)
import ToData (class ToData, genericToData)
import Type.Proxy (Proxy(Proxy))
import TypeLevel.DataSchema
  ( ApPCons
  , Field
  , I
  , Id
  , IxK
  , MkField
  , MkField_
  , MkIxK
  , MkIxK_
  , PCons
  , PNil
  , PSchema
  , class HasPlutusSchema
  , type (:+)
  , type (:=)
  , type (@@)
  )
import TypeLevel.Nat (S, Z)
import Types.ByteArray (ByteArray)
import Types.PlutusData (PlutusData)

newtype Redeemer = Redeemer { getRedeemer :: PlutusData }

instance Show Redeemer where
  show a = genericShow a

derive instance Generic Redeemer _

derive instance Newtype Redeemer _

instance
  HasPlutusSchema Redeemer
    ( "Redeemer"
        :=
          ( "getRedeemer" := I PlutusData
              :+ PNil
          )
        @@ (Z)
        :+ PNil
    )

instance ToData Redeemer where
  toData x = genericToData x

instance FromData Redeemer where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_Redeemer :: Iso' Redeemer { getRedeemer :: PlutusData }
_Redeemer = _Newtype

--------------------------------------------------------------------------------

newtype Datum = Datum { getDatum :: PlutusData }

instance Show Datum where
  show a = genericShow a

derive instance Generic Datum _

derive instance Newtype Datum _

instance
  HasPlutusSchema Datum
    ( "Datum"
        :=
          ( "getDatum" := I PlutusData
              :+ PNil
          )
        @@ (Z)
        :+ PNil
    )

instance ToData Datum where
  toData x = genericToData x

instance FromData Datum where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_Datum :: Iso' Datum { getDatum :: PlutusData }
_Datum = _Newtype

--------------------------------------------------------------------------------

newtype ScriptHash = ScriptHash { getScriptHash :: ByteArray }

instance Show ScriptHash where
  show a = genericShow a

derive instance Generic ScriptHash _

derive instance Newtype ScriptHash _

instance
  HasPlutusSchema ScriptHash
    ( "ScriptHash"
        :=
          ( "getScriptHash" := I ByteArray
              :+ PNil
          )
        @@ (Z)
        :+ PNil
    )

instance ToData ScriptHash where
  toData x = genericToData x

instance FromData ScriptHash where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_ScriptHash :: Iso' ScriptHash { getScriptHash :: ByteArray }
_ScriptHash = _Newtype

--------------------------------------------------------------------------------

newtype ValidatorHash = ValidatorHash ByteArray

instance Show ValidatorHash where
  show a = genericShow a

derive instance Generic ValidatorHash _

derive instance Newtype ValidatorHash _

instance
  HasPlutusSchema ValidatorHash
    ( "ValidatorHash" := PNil
        @@ (Z)
        :+ PNil
    )

instance ToData ValidatorHash where
  toData x = genericToData x

instance FromData ValidatorHash where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_ValidatorHash :: Iso' ValidatorHash ByteArray
_ValidatorHash = _Newtype

--------------------------------------------------------------------------------

newtype DatumHash = DatumHash ByteArray

instance Show DatumHash where
  show a = genericShow a

derive instance Generic DatumHash _

derive instance Newtype DatumHash _

instance
  HasPlutusSchema DatumHash
    ( "DatumHash" := PNil
        @@ (Z)
        :+ PNil
    )

instance ToData DatumHash where
  toData x = genericToData x

instance FromData DatumHash where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_DatumHash :: Iso' DatumHash ByteArray
_DatumHash = _Newtype

--------------------------------------------------------------------------------

newtype MintingPolicyHash = MintingPolicyHash ByteArray

instance Show MintingPolicyHash where
  show a = genericShow a

derive instance Generic MintingPolicyHash _

derive instance Newtype MintingPolicyHash _

instance
  HasPlutusSchema MintingPolicyHash
    ( "MintingPolicyHash" := PNil
        @@ (Z)
        :+ PNil
    )

instance ToData MintingPolicyHash where
  toData x = genericToData x

instance FromData MintingPolicyHash where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_MintingPolicyHash :: Iso' MintingPolicyHash ByteArray
_MintingPolicyHash = _Newtype

--------------------------------------------------------------------------------

newtype StakeValidatorHash = StakeValidatorHash ByteArray

instance Show StakeValidatorHash where
  show a = genericShow a

derive instance Generic StakeValidatorHash _

derive instance Newtype StakeValidatorHash _

instance
  HasPlutusSchema StakeValidatorHash
    ( "StakeValidatorHash" := PNil
        @@ (Z)
        :+ PNil
    )

instance ToData StakeValidatorHash where
  toData x = genericToData x

instance FromData StakeValidatorHash where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_StakeValidatorHash :: Iso' StakeValidatorHash ByteArray
_StakeValidatorHash = _Newtype
