-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Scripts where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut.Core (Json, jsonNull)
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>), decode, null)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<), encode, null)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (class Newtype, unwrap)
import Data.Op (Op(Op))
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import FromData (class FromData, genericFromData)
import Record (get)
import ToData (class ToData, genericToData)
import Type.Proxy (Proxy(Proxy))
import Types.ByteArray (ByteArray)
import Types.PlutusData (PlutusData)
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype Redeemer = Redeemer PlutusData

instance Show Redeemer where
  show a = genericShow a

derive instance Generic Redeemer _

derive instance Newtype Redeemer _



derive newtype instance ToData Redeemer

derive newtype instance FromData Redeemer

instance EncodeJson Redeemer where
  encodeJson x = E.encode  (E.record {getRedeemer: E.value :: Op Json (PlutusData) }) {getRedeemer: unwrap x}

instance DecodeJson Redeemer where
  decodeJson = defer \_ -> get (Proxy :: Proxy "getRedeemer") <$> D.decode D.record "getRedeemer"{ getRedeemer: D.value}

--------------------------------------------------------------------------------

_Redeemer :: Iso' Redeemer PlutusData
_Redeemer = _Newtype

--------------------------------------------------------------------------------

newtype Datum = Datum PlutusData

instance Show Datum where
  show a = genericShow a

derive instance Generic Datum _

derive instance Newtype Datum _



derive newtype instance ToData Datum

derive newtype instance FromData Datum

instance EncodeJson Datum where
  encodeJson x = E.encode  (E.record {getDatum: E.value :: Op Json (PlutusData) }) {getDatum: unwrap x}

instance DecodeJson Datum where
  decodeJson = defer \_ -> get (Proxy :: Proxy "getDatum") <$> D.decode D.record "getDatum"{ getDatum: D.value}

--------------------------------------------------------------------------------

_Datum :: Iso' Datum PlutusData
_Datum = _Newtype

--------------------------------------------------------------------------------

newtype ScriptHash = ScriptHash ByteArray

instance Show ScriptHash where
  show a = genericShow a

derive instance Generic ScriptHash _

derive instance Newtype ScriptHash _



derive newtype instance ToData ScriptHash

derive newtype instance FromData ScriptHash

instance EncodeJson ScriptHash where
  encodeJson x = E.encode  (E.record {getScriptHash: E.value :: Op Json (ByteArray) }) {getScriptHash: unwrap x}

instance DecodeJson ScriptHash where
  decodeJson = defer \_ -> get (Proxy :: Proxy "getScriptHash") <$> D.decode D.record "getScriptHash"{ getScriptHash: D.value}

--------------------------------------------------------------------------------

_ScriptHash :: Iso' ScriptHash ByteArray
_ScriptHash = _Newtype

--------------------------------------------------------------------------------

newtype ValidatorHash = ValidatorHash ByteArray

instance Show ValidatorHash where
  show a = genericShow a

derive instance Generic ValidatorHash _

derive instance Newtype ValidatorHash _



derive newtype instance ToData ValidatorHash

derive newtype instance FromData ValidatorHash

instance EncodeJson ValidatorHash where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson ValidatorHash where
  decodeJson = defer \_ -> D.decode $ (ValidatorHash <$> D.value)

--------------------------------------------------------------------------------

_ValidatorHash :: Iso' ValidatorHash ByteArray
_ValidatorHash = _Newtype

--------------------------------------------------------------------------------

newtype DatumHash = DatumHash ByteArray

instance Show DatumHash where
  show a = genericShow a

derive instance Generic DatumHash _

derive instance Newtype DatumHash _



derive newtype instance ToData DatumHash

derive newtype instance FromData DatumHash

instance EncodeJson DatumHash where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson DatumHash where
  decodeJson = defer \_ -> D.decode $ (DatumHash <$> D.value)

--------------------------------------------------------------------------------

_DatumHash :: Iso' DatumHash ByteArray
_DatumHash = _Newtype

--------------------------------------------------------------------------------

newtype MintingPolicyHash = MintingPolicyHash ByteArray

instance Show MintingPolicyHash where
  show a = genericShow a

derive instance Generic MintingPolicyHash _

derive instance Newtype MintingPolicyHash _



derive newtype instance ToData MintingPolicyHash

derive newtype instance FromData MintingPolicyHash

instance EncodeJson MintingPolicyHash where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson MintingPolicyHash where
  decodeJson = defer \_ -> D.decode $ (MintingPolicyHash <$> D.value)

--------------------------------------------------------------------------------

_MintingPolicyHash :: Iso' MintingPolicyHash ByteArray
_MintingPolicyHash = _Newtype

--------------------------------------------------------------------------------

newtype StakeValidatorHash = StakeValidatorHash ByteArray

instance Show StakeValidatorHash where
  show a = genericShow a

derive instance Generic StakeValidatorHash _

derive instance Newtype StakeValidatorHash _



derive newtype instance ToData StakeValidatorHash

derive newtype instance FromData StakeValidatorHash

instance EncodeJson StakeValidatorHash where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson StakeValidatorHash where
  decodeJson = defer \_ -> D.decode $ (StakeValidatorHash <$> D.value)

--------------------------------------------------------------------------------

_StakeValidatorHash :: Iso' StakeValidatorHash ByteArray
_StakeValidatorHash = _Newtype
