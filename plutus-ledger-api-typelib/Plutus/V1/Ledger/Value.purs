-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Value where

import Prelude

import ConstrIndices (class HasConstrIndices, constrIndices, fromConstr2Index)
import Data.BigInt (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(Nothing, Just))
import Data.Newtype (class Newtype)
import Data.Tuple (Tuple, Tuple(Tuple))
import FromData (class FromData, fromData, genericFromData)
import Plutus.Types.AssocMap (Map)
import ToData (class ToData, genericToData, toData)
import Type.Proxy (Proxy(Proxy))
import Types.ByteArray (ByteArray)

newtype Value = Value (Map CurrencySymbol (Map TokenName BigInt))

derive instance Generic Value _

derive instance Newtype Value _

derive newtype instance ToData Value
derive newtype instance FromData Value

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

newtype CurrencySymbol = CurrencySymbol { unCurrencySymbol :: ByteArray }

derive instance Eq CurrencySymbol

derive instance Ord CurrencySymbol

derive instance Generic CurrencySymbol _

derive instance Newtype CurrencySymbol _

instance HasConstrIndices CurrencySymbol where
  constrIndices _ = fromConstr2Index [ Tuple "CurrencySymbol" 0 ]

instance ToData CurrencySymbol where
  toData x = genericToData x

instance FromData CurrencySymbol where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_CurrencySymbol :: Iso' CurrencySymbol { unCurrencySymbol :: ByteArray }
_CurrencySymbol = _Newtype

--------------------------------------------------------------------------------

newtype AssetClass = AssetClass
  { unAssetClass :: Tuple CurrencySymbol TokenName }

derive instance Eq AssetClass

derive instance Ord AssetClass

derive instance Generic AssetClass _

derive instance Newtype AssetClass _

instance HasConstrIndices AssetClass where
  constrIndices _ = fromConstr2Index [ Tuple "AssetClass" 0 ]

instance ToData AssetClass where
  toData x = genericToData x

instance FromData AssetClass where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_AssetClass
  :: Iso' AssetClass { unAssetClass :: Tuple CurrencySymbol TokenName }
_AssetClass = _Newtype

--------------------------------------------------------------------------------

newtype TokenName = TokenName { unTokenName :: ByteArray }

derive instance Eq TokenName

derive instance Ord TokenName

derive instance Generic TokenName _

derive instance Newtype TokenName _

instance HasConstrIndices TokenName where
  constrIndices _ = fromConstr2Index [ Tuple "TokenName" 0 ]

instance ToData TokenName where
  toData x = genericToData x

instance FromData TokenName where
  fromData pd = genericFromData pd

--------------------------------------------------------------------------------

_TokenName :: Iso' TokenName { unTokenName :: ByteArray }
_TokenName = _Newtype
