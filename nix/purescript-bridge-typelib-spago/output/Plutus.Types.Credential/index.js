// Generated by purs version 0.14.5
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var FromData = require("../FromData/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var ToData = require("../ToData/index.js");
var Types_PlutusData = require("../Types.PlutusData/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_UnbalancedTransaction = require("../Types.UnbalancedTransaction/index.js");
var PubKeyCredential = (function () {
    function PubKeyCredential(value0) {
        this.value0 = value0;
    };
    PubKeyCredential.create = function (value0) {
        return new PubKeyCredential(value0);
    };
    return PubKeyCredential;
})();
var ScriptCredential = (function () {
    function ScriptCredential(value0) {
        this.value0 = value0;
    };
    ScriptCredential.create = function (value0) {
        return new ScriptCredential(value0);
    };
    return ScriptCredential;
})();
var StakingHash = (function () {
    function StakingHash(value0) {
        this.value0 = value0;
    };
    StakingHash.create = function (value0) {
        return new StakingHash(value0);
    };
    return StakingHash;
})();
var StakingPtr = (function () {
    function StakingPtr(value0) {
        this.value0 = value0;
    };
    StakingPtr.create = function (value0) {
        return new StakingPtr(value0);
    };
    return StakingPtr;
})();
var toDataCredential = {
    toData: function (v) {
        if (v instanceof PubKeyCredential) {
            return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ ToData.toData(Types_UnbalancedTransaction.toDataPubKeyHash)(v.value0) ]);
        };
        if (v instanceof ScriptCredential) {
            return new Types_PlutusData.Constr(Data_Semiring.one(Data_BigInt.semiringBigInt), [ ToData.toData(Types_Scripts.toDataValidatorHash)(v.value0) ]);
        };
        throw new Error("Failed pattern match at Plutus.Types.Credential (line 39, column 1 - line 43, column 40): " + [ v.constructor.name ]);
    }
};
var toDataStakingCredential = {
    toData: function (v) {
        if (v instanceof StakingHash) {
            return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ ToData.toData(toDataCredential)(v.value0) ]);
        };
        if (v instanceof StakingPtr) {
            return new Types_PlutusData.Constr(Data_Semiring.one(Data_BigInt.semiringBigInt), [ ToData.toData(Serialization_Address.toDataSlot)(v.value0.slot), ToData.toData(Serialization_Address.toDataTransactionIndex)(v.value0.txIx), ToData.toData(Serialization_Address.toDataCertificateIndex)(v.value0.certIx) ]);
        };
        throw new Error("Failed pattern match at Plutus.Types.Credential (line 69, column 1 - line 73, column 71): " + [ v.constructor.name ]);
    }
};
var genericStakingCredential_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new StakingHash(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new StakingPtr(x.value0);
        };
        throw new Error("Failed pattern match at Plutus.Types.Credential (line 64, column 1 - line 64, column 44): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof StakingHash) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof StakingPtr) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at Plutus.Types.Credential (line 64, column 1 - line 64, column 44): " + [ x.constructor.name ]);
    }
};
var genericCredential_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new PubKeyCredential(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new ScriptCredential(x.value0);
        };
        throw new Error("Failed pattern match at Plutus.Types.Credential (line 34, column 1 - line 34, column 37): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof PubKeyCredential) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof ScriptCredential) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at Plutus.Types.Credential (line 34, column 1 - line 34, column 37): " + [ x.constructor.name ]);
    }
};
var showCredential = {
    show: Data_Show_Generic.genericShow(genericCredential_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_UnbalancedTransaction.showPubKeyHash))({
        reflectSymbol: function () {
            return "PubKeyCredential";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showValidatorHash))({
        reflectSymbol: function () {
            return "ScriptCredential";
        }
    })))
};
var showStakingCredential = {
    show: Data_Show_Generic.genericShow(genericStakingCredential_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showCredential))({
        reflectSymbol: function () {
            return "StakingHash";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "certIx";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "slot";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "txIx";
        }
    })(Data_Show.showRecordFieldsNil)(Serialization_Address.showTransactionIndex))(Serialization_Address.showSlot))(Serialization_Address.showCertificateIndex))))({
        reflectSymbol: function () {
            return "StakingPtr";
        }
    })))
};
var fromDataCredential = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Constr && v.value1.length === 1) {
            if (Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(PubKeyCredential.create)(FromData.fromData(Types_UnbalancedTransaction.fromDataPubKeyHash)(v["value1"][0]));
            };
            if (Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.one(Data_BigInt.semiringBigInt))) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(ScriptCredential.create)(FromData.fromData(Types_Scripts.fromDataValidatorHash)(v["value1"][0]));
            };
        };
        return Data_Maybe.Nothing.value;
    }
};
var fromDataStakingCredential = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Constr && (v.value1.length === 1 && Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(StakingHash.create)(FromData.fromData(fromDataCredential)(v["value1"][0]));
        };
        if (v instanceof Types_PlutusData.Constr && (v.value1.length === 3 && Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.one(Data_BigInt.semiringBigInt)))) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(StakingPtr.create)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                return function (v2) {
                    return function (v3) {
                        return {
                            slot: v1,
                            txIx: v2,
                            certIx: v3
                        };
                    };
                };
            })(FromData.fromData(Serialization_Address.fromDataSlot)(v["value1"][0])))(FromData.fromData(Serialization_Address.fromDataTransactionIndex)(v["value1"][1])))(FromData.fromData(Serialization_Address.fromDataCertificateIndex)(v["value1"][2])));
        };
        return Data_Maybe.Nothing.value;
    }
};
var eqCredential = {
    eq: function (x) {
        return function (y) {
            if (x instanceof PubKeyCredential && y instanceof PubKeyCredential) {
                return Data_Eq.eq(Types_UnbalancedTransaction.eqPubKeyHash)(x.value0)(y.value0);
            };
            if (x instanceof ScriptCredential && y instanceof ScriptCredential) {
                return Data_Eq.eq(Types_Scripts.eqValidatorHash)(x.value0)(y.value0);
            };
            return false;
        };
    }
};
var eqStakingCredential = {
    eq: function (x) {
        return function (y) {
            if (x instanceof StakingHash && y instanceof StakingHash) {
                return Data_Eq.eq(eqCredential)(x.value0)(y.value0);
            };
            if (x instanceof StakingPtr && y instanceof StakingPtr) {
                return Data_Eq.eq(Serialization_Address.eqCertificateIndex)(x.value0.certIx)(y.value0.certIx) && Data_Eq.eq(Serialization_Address.eqSlot)(x.value0.slot)(y.value0.slot) && Data_Eq.eq(Serialization_Address.eqTransactionIndex)(x.value0.txIx)(y.value0.txIx);
            };
            return false;
        };
    }
};
var ordCredential = {
    compare: function (x) {
        return function (y) {
            if (x instanceof PubKeyCredential && y instanceof PubKeyCredential) {
                return Data_Ord.compare(Types_UnbalancedTransaction.ordPubKeyHash)(x.value0)(y.value0);
            };
            if (x instanceof PubKeyCredential) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof PubKeyCredential) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof ScriptCredential && y instanceof ScriptCredential) {
                return Data_Ord.compare(Types_Scripts.ordValidatorHash)(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Plutus.Types.Credential (line 33, column 1 - line 33, column 31): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqCredential;
    }
};
var ordStakingCredential = {
    compare: function (x) {
        return function (y) {
            if (x instanceof StakingHash && y instanceof StakingHash) {
                return Data_Ord.compare(ordCredential)(x.value0)(y.value0);
            };
            if (x instanceof StakingHash) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof StakingHash) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof StakingPtr && y instanceof StakingPtr) {
                var v = Data_Ord.compare(Serialization_Address.ordCertificateIndex)(x.value0.certIx)(y.value0.certIx);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                var v1 = Data_Ord.compare(Serialization_Address.ordSlot)(x.value0.slot)(y.value0.slot);
                if (v1 instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(Serialization_Address.ordTransactionIndex)(x.value0.txIx)(y.value0.txIx);
            };
            throw new Error("Failed pattern match at Plutus.Types.Credential (line 63, column 1 - line 63, column 38): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqStakingCredential;
    }
};
module.exports = {
    PubKeyCredential: PubKeyCredential,
    ScriptCredential: ScriptCredential,
    StakingHash: StakingHash,
    StakingPtr: StakingPtr,
    eqCredential: eqCredential,
    ordCredential: ordCredential,
    genericCredential_: genericCredential_,
    showCredential: showCredential,
    toDataCredential: toDataCredential,
    fromDataCredential: fromDataCredential,
    eqStakingCredential: eqStakingCredential,
    ordStakingCredential: ordStakingCredential,
    genericStakingCredential_: genericStakingCredential_,
    showStakingCredential: showStakingCredential,
    toDataStakingCredential: toDataStakingCredential,
    fromDataStakingCredential: fromDataStakingCredential
};
