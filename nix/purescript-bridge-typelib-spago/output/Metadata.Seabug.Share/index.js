// Generated by purs version 0.14.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var ToData = require("../ToData/index.js");
var Types_PlutusData = require("../Types.PlutusData/index.js");
var Share = function (x) {
    return x;
};
var toDataShare = ToData.toDataBigInt;
var showShare = {
    show: function (v) {
        return "(mkShare (" + (Data_Show.show(Data_BigInt.showBigInt)(v) + "))");
    }
};
var eqShare = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Data_BigInt.eqBigInt)(x)(y);
        };
    }
};
var unShare = function (v) {
    return v;
};
var mkShare = function (n) {
    if (n >= 0 && n <= 10000) {
        return Data_Maybe.Just.create(Share(Data_BigInt.fromInt(n)));
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Metadata.Seabug.Share (line 30, column 1 - line 30, column 30): " + [ n.constructor.name ]);
};
var fromDataShare = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Integer) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_BigInt.toInt(v.value0))(mkShare);
        };
        return Data_Maybe.Nothing.value;
    }
};
module.exports = {
    mkShare: mkShare,
    unShare: unShare,
    toDataShare: toDataShare,
    fromDataShare: fromDataShare,
    showShare: showShare,
    eqShare: eqShare
};
