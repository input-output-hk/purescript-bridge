// Generated by purs version 0.14.5
"use strict";
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_UInt = require("../Data.UInt/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var UsedTxOuts = function (x) {
    return x;
};
var newtypeUsedTxOuts_ = {
    Coercible0: function () {
        return undefined;
    }
};
var unlockTxOutRefs = function (dictMonadAsk) {
    return function (dictMonadEffect) {
        return function (dictFoldable) {
            return function (txOutRefs$prime) {
                var updateCache = function (cache) {
                    return Data_Foldable.foldr(dictFoldable)(function (v) {
                        return Data_Map_Internal.update(Types_Transaction.ordTransactionHash)((function () {
                            var $24 = Data_Set["delete"](Data_UInt.uintOrd)(v.index);
                            return function ($25) {
                                return (function (s) {
                                    var $15 = Data_Set.isEmpty(s);
                                    if ($15) {
                                        return Data_Maybe.Nothing.value;
                                    };
                                    return new Data_Maybe.Just(s);
                                })($24($25));
                            };
                        })())(v.transactionId);
                    })(cache)(txOutRefs$prime);
                };
                return Control_Bind.bind((dictMonadAsk.Monad0()).Bind1())(Control_Monad_Reader_Class.ask(dictMonadAsk))((function () {
                    var $26 = Effect_Class.liftEffect(dictMonadEffect);
                    var $27 = Effect_Ref.modify_(updateCache);
                    var $28 = Data_Newtype.unwrap();
                    return function ($29) {
                        return $26($27($28($29)));
                    };
                })());
            };
        };
    };
};
var txOutRefs = function (tx) {
    return Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap())((Data_Newtype.unwrap()((Data_Newtype.unwrap()(tx)).body)).inputs);
};
var unlockTransactionInputs = function (dictMonadAsk) {
    return function (dictMonadEffect) {
        var $30 = unlockTxOutRefs(dictMonadAsk)(dictMonadEffect)(Data_Foldable.foldableArray);
        return function ($31) {
            return $30(txOutRefs($31));
        };
    };
};
var newUsedTxOuts = function (dictMonadEffect) {
    return Data_Functor.map((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(UsedTxOuts)(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Map_Internal.empty)));
};
var lockTransactionInputs = function (dictMonadAsk) {
    return function (dictMonadEffect) {
        return function (tx) {
            var updateCache = function (cache) {
                return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
                    return Data_Map_Internal.alter(Types_Transaction.ordTransactionHash)((function () {
                        var $32 = Data_Set.insert(Data_UInt.uintOrd)(v.index);
                        var $33 = Data_Maybe.fromMaybe(Data_Set.empty);
                        return function ($34) {
                            return Data_Maybe.Just.create($32($33($34)));
                        };
                    })())(v.transactionId);
                })(cache)(txOutRefs(tx));
            };
            return Control_Bind.bind((dictMonadAsk.Monad0()).Bind1())(Control_Monad_Reader_Class.ask(dictMonadAsk))((function () {
                var $35 = Effect_Class.liftEffect(dictMonadEffect);
                var $36 = Effect_Ref.modify_(updateCache);
                var $37 = Data_Newtype.unwrap();
                return function ($38) {
                    return $35($36($37($38)));
                };
            })());
        };
    };
};
var isTxOutRefUsed = function (dictMonadAsk) {
    return function (dictMonadEffect) {
        return function (v) {
            return Control_Bind.bind((dictMonadAsk.Monad0()).Bind1())(Control_Bind.bindFlipped((dictMonadAsk.Monad0()).Bind1())((function () {
                var $39 = Effect_Class.liftEffect(dictMonadEffect);
                var $40 = Data_Newtype.unwrap();
                return function ($41) {
                    return $39(Effect_Ref.read($40($41)));
                };
            })())(Control_Monad_Reader_Class.ask(dictMonadAsk)))(function (cache) {
                return Control_Applicative.pure((dictMonadAsk.Monad0()).Applicative0())(Data_Maybe.isJust(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Types_Transaction.ordTransactionHash)(v.transactionId)(cache))(function (indices) {
                    return Control_Alternative.guard(Data_Maybe.alternativeMaybe)(Data_Set.member(Data_UInt.uintOrd)(v.index)(indices));
                })));
            });
        };
    };
};
module.exports = {
    UsedTxOuts: UsedTxOuts,
    isTxOutRefUsed: isTxOutRefUsed,
    lockTransactionInputs: lockTransactionInputs,
    newUsedTxOuts: newUsedTxOuts,
    unlockTxOutRefs: unlockTxOutRefs,
    unlockTransactionInputs: unlockTransactionInputs,
    newtypeUsedTxOuts_: newtypeUsedTxOuts_
};
