// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Char = require("../Data.Char/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Test_QuickCheck_Arbitrary = require("../Test.QuickCheck.Arbitrary/index.js");
var Test_QuickCheck_Gen = require("../Test.QuickCheck.Gen/index.js");
var ByteArray = function (x) {
    return x;
};
var showByteArray = {
    show: function (arr) {
        return "(byteArrayFromIntArrayUnsafe " + (Data_Show.show(Data_Show.showArray(Data_Show.showInt))($foreign.byteArrayToIntArray(arr)) + ")");
    }
};
var semigroupByteArray = {
    append: $foreign.concat_
};
var newtypeByteArray_ = {
    Coercible0: function () {
        return undefined;
    }
};
var monoidByteArray = {
    mempty: $foreign.byteArrayFromIntArrayUnsafe([  ]),
    Semigroup0: function () {
        return semigroupByteArray;
    }
};
var ordByteArray = {
    compare: (function () {
        var toDelta = function (x) {
            return function (y) {
                var v = Data_Ord.compare(Data_Ord.ordInt)(x)(y);
                if (v instanceof Data_Ordering.EQ) {
                    return 0;
                };
                if (v instanceof Data_Ordering.LT) {
                    return 1;
                };
                if (v instanceof Data_Ordering.GT) {
                    return -1 | 0;
                };
                throw new Error("Failed pattern match at Types.ByteArray (line 41, column 7 - line 44, column 17): " + [ v.constructor.name ]);
            };
        };
        return function (xs) {
            return function (ys) {
                return Data_Ord.compare(Data_Ord.ordInt)(0)($foreign.ord_(toDelta)(xs)(ys));
            };
        };
    })(),
    Eq0: function () {
        return eqByteArray;
    }
};
var eqByteArray = {
    eq: function (a) {
        return function (b) {
            return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordByteArray)(a)(b))(Data_Ordering.EQ.value);
        };
    }
};
var arbitraryByteArray = {
    arbitrary: Data_Functor.map(Test_QuickCheck_Gen.functorGen)($foreign.byteArrayFromIntArrayUnsafe)(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbArray(Test_QuickCheck_Arbitrary.arbInt)))
};
var hexToByteArray = $foreign.hexToByteArray_(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var decodeJsonByteArray = {
    decodeJson: function (j) {
        return Data_Argonaut_Core.caseJsonString(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("expected a hex-encoded CBOR string")))((function () {
            var $12 = Data_Either.note(new Data_Argonaut_Decode_Error.UnexpectedValue(j));
            return function ($13) {
                return $12(hexToByteArray($13));
            };
        })())(j);
    }
};
var byteLength = (function () {
    var $14 = Data_Newtype.unwrap();
    return function ($15) {
        return $foreign["_byteLength"]($14($15));
    };
})();
var byteArrayFromIntArray = $foreign.byteArrayFromIntArray_(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var byteArrayFromAscii = function (str) {
    return Data_Functor.map(Data_Maybe.functorMaybe)($foreign.byteArrayFromIntArrayUnsafe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(Data_String_CodeUnits.toCharArray(str))(function (cp) {
        var charCode = Data_Char.toCharCode(cp);
        var $11 = charCode <= 255 && charCode >= 0;
        if ($11) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(charCode);
        };
        return Data_Maybe.Nothing.value;
    }));
};
module.exports = {
    ByteArray: ByteArray,
    byteArrayFromIntArray: byteArrayFromIntArray,
    byteArrayFromAscii: byteArrayFromAscii,
    byteLength: byteLength,
    hexToByteArray: hexToByteArray,
    newtypeByteArray_: newtypeByteArray_,
    showByteArray: showByteArray,
    eqByteArray: eqByteArray,
    ordByteArray: ordByteArray,
    semigroupByteArray: semigroupByteArray,
    monoidByteArray: monoidByteArray,
    decodeJsonByteArray: decodeJsonByteArray,
    arbitraryByteArray: arbitraryByteArray,
    byteArrayFromIntArrayUnsafe: $foreign.byteArrayFromIntArrayUnsafe,
    byteArrayToHex: $foreign.byteArrayToHex,
    byteArrayToIntArray: $foreign.byteArrayToIntArray,
    hexToByteArrayUnsafe: $foreign.hexToByteArrayUnsafe
};
