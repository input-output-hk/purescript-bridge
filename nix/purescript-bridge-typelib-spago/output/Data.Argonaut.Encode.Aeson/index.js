// Generated by purs version 0.14.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Argonaut_Aeson = require("../Data.Argonaut.Aeson/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Encode_Class = require("../Data.Argonaut.Encode.Class/index.js");
var Data_Argonaut_Encode_Combinators = require("../Data.Argonaut.Encode.Combinators/index.js");
var Data_Argonaut_Encode_Encoders = require("../Data.Argonaut.Encode.Encoders/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Divide = require("../Data.Divide/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Contravariant = require("../Data.Functor.Contravariant/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Op = require("../Data.Op/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Last = require("../Data.Semigroup.Last/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var value = function (dictEncodeJson) {
    return Data_Op.Op(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
};
var unit = Data_Op.Op(Data_Function["const"](Data_Argonaut_Core.jsonEmptyArray));
var tuple = Data_Newtype.over()()(Data_Op.Op)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Data_Argonaut_Core.fromArray));
var toTupleEncoderTupleEncoder = {
    toTupleEncoder: Control_Category.identity(Control_Category.categoryFn)
};
var toTupleEncoder = function (dict) {
    return dict.toTupleEncoder;
};
var rowListEncoderNil = {
    rowListEncoder: function (v) {
        return function (v1) {
            return Data_Op.Op(Data_Function["const"](Foreign_Object.empty));
        };
    }
};
var rowListEncoder = function (dict) {
    return dict.rowListEncoder;
};
var $$null = Data_Op.Op(Data_Function["const"](Data_Argonaut_Core.jsonNull));
var mapEncoder = (function () {
    var $32 = Data_Newtype.over()()(Data_Op.Op);
    var $33 = Data_Functor.map(Data_Functor.functorFn);
    return function ($34) {
        return $32($33($34));
    };
})();
var record = function (dictRowToList) {
    return function (dictRowListEncoder) {
        return function (encoders) {
            return mapEncoder((function () {
                var $35 = Data_Functor.map(Foreign_Object.functorObject)(Data_Newtype.unwrap());
                return function ($36) {
                    return Data_Argonaut_Core.fromObject($35($36));
                };
            })())(rowListEncoder(dictRowListEncoder)(Type_Proxy["Proxy"].value)(encoders));
        };
    };
};
var toTupleEncoderEncoder = {
    toTupleEncoder: mapEncoder(Data_Array.singleton)
};
var tupleDivided = function (dictToTupleEncoder) {
    return function (encoder) {
        var $37 = Data_Divide.divided(Data_Divide.divideOp(Data_Semigroup.semigroupArray))(toTupleEncoder(toTupleEncoderEncoder)(encoder));
        var $38 = toTupleEncoder(dictToTupleEncoder);
        return function ($39) {
            return $37($38($39));
        };
    };
};
var $$enum = function (dictShow) {
    return Data_Op.Op((function () {
        var $40 = Data_Show.show(dictShow);
        return function ($41) {
            return Data_Argonaut_Encode_Encoders.encodeString($40($41));
        };
    })());
};
var encode = Data_Newtype.unwrap();
var encodeTagged = function (tag) {
    return function (a) {
        return function (encoder) {
            return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Aeson.tagProp)(tag))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Aeson.contentsProp)(encode(encoder)(a)))(Data_Argonaut_Core.jsonEmptyObject));
        };
    };
};
var maybe = function (encoder) {
    return function (v) {
        if (v instanceof Data_Maybe.Just) {
            return encode(encoder)(v.value0);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Argonaut_Core.jsonNull;
        };
        throw new Error("Failed pattern match at Data.Argonaut.Encode.Aeson (line 105, column 20 - line 107, column 22): " + [ v.constructor.name ]);
    };
};
var propEncoder = function (dictIsSymbol) {
    return function (p) {
        return function (encoder) {
            return Data_Op.Op((function () {
                var $42 = Foreign_Object.singleton(Data_Symbol.reflectSymbol(dictIsSymbol)(p));
                var $43 = encode(encoder);
                return function ($44) {
                    return $42(Data_Semigroup_Last.Last($43($44)));
                };
            })());
        };
    };
};
var rowListEncoderEncoderCons = function (dictIsSymbol) {
    return function (dictLacks) {
        return function (dictCons) {
            return function (dictLacks1) {
                return function (dictCons1) {
                    return function (dictRowListEncoder) {
                        return {
                            rowListEncoder: function (v) {
                                return function (encoders) {
                                    var v1 = Data_Argonaut_Aeson.unconsRecord(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(encoders);
                                    return Data_Functor_Contravariant.cmap(Data_Op.contravariantOp)(Data_Argonaut_Aeson.unconsRecord(dictIsSymbol)()()(Type_Proxy["Proxy"].value))(Data_Divide.divided(Data_Divide.divideOp(Foreign_Object.semigroupObject(Data_Semigroup_Last.semigroupLast)))(propEncoder(dictIsSymbol)(Type_Proxy["Proxy"].value)(v1.value0))(rowListEncoder(dictRowListEncoder)(Type_Proxy["Proxy"].value)(v1.value1)));
                                };
                            }
                        };
                    };
                };
            };
        };
    };
};
var either = function (encoderA) {
    return function (encoderB) {
        return function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Aeson.leftProp)(encode(encoderA)(v.value0)))(Data_Argonaut_Core.jsonEmptyObject);
            };
            if (v instanceof Data_Either.Right) {
                return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Aeson.rightProp)(encode(encoderB)(v.value0)))(Data_Argonaut_Core.jsonEmptyObject);
            };
            throw new Error("Failed pattern match at Data.Argonaut.Encode.Aeson (line 110, column 31 - line 112, column 63): " + [ v.constructor.name ]);
        };
    };
};
var dictionary = function (encoderA) {
    return function (encoderB) {
        var tryString = Data_Argonaut_Core.caseJson(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value));
        var toPairs = (function () {
            var $45 = Data_Functor.map(Data_Functor.functorArray)(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(encode(encoderA))(encode(encoderB)));
            var $46 = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
            return function ($47) {
                return $45($46($47));
            };
        })();
        var encodePairs = function (pairs) {
            var v = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(Data_Maybe.applicativeMaybe)(tryString))(pairs);
            if (v instanceof Data_Maybe.Nothing) {
                return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonTuple(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Class.encodeJsonJson)))(pairs);
            };
            if (v instanceof Data_Maybe.Just) {
                return Data_Argonaut_Core.fromObject(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(v.value0));
            };
            throw new Error("Failed pattern match at Data.Argonaut.Encode.Aeson (line 120, column 23 - line 122, column 52): " + [ v.constructor.name ]);
        };
        return Data_Op.Op(function ($48) {
            return encodePairs(toPairs($48));
        });
    };
};
module.exports = {
    dictionary: dictionary,
    either: either,
    encode: encode,
    "enum": $$enum,
    maybe: maybe,
    "null": $$null,
    record: record,
    rowListEncoder: rowListEncoder,
    encodeTagged: encodeTagged,
    tuple: tuple,
    toTupleEncoder: toTupleEncoder,
    tupleDivided: tupleDivided,
    unit: unit,
    value: value,
    toTupleEncoderEncoder: toTupleEncoderEncoder,
    toTupleEncoderTupleEncoder: toTupleEncoderTupleEncoder,
    rowListEncoderNil: rowListEncoderNil,
    rowListEncoderEncoderCons: rowListEncoderEncoderCons
};
