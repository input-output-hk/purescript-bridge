// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Argonaut_Decode_Combinators = require("../Data.Argonaut.Decode.Combinators/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var FfiHelpers = require("../FfiHelpers/index.js");
var ToData = require("../ToData/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_PlutusData = require("../Types.PlutusData/index.js");
var toDataScriptHash = {
    toData: (function () {
        var $18 = ToData.toData(ToData.toDataByteArray);
        return function ($19) {
            return $18($foreign.scriptHashToBytes($19));
        };
    })()
};
var toDataEd25519KeyHash = {
    toData: (function () {
        var $20 = ToData.toData(ToData.toDataByteArray);
        return function ($21) {
            return $20($foreign.ed25519KeyHashToBytes($21));
        };
    })()
};
var showScriptHash = {
    show: function (edkh) {
        return "(ScriptHash " + (Types_ByteArray.byteArrayToHex($foreign.scriptHashToBytes(edkh)) + ")");
    }
};
var showEd25519KeyHash = {
    show: function (edkh) {
        return "(Ed25519KeyHash " + (Types_ByteArray.byteArrayToHex($foreign.ed25519KeyHashToBytes(edkh)) + ")");
    }
};
var eqScriptHash = {
    eq: Data_Function.on(Data_Eq.eq(Types_ByteArray.eqByteArray))($foreign.scriptHashToBytes)
};
var ordScriptHash = {
    compare: Data_Function.on(Data_Ord.compare(Types_ByteArray.ordByteArray))($foreign.scriptHashToBytes),
    Eq0: function () {
        return eqScriptHash;
    }
};
var eqEd25519KeyHash = {
    eq: Data_Function.on(Data_Eq.eq(Types_ByteArray.eqByteArray))($foreign.ed25519KeyHashToBytes)
};
var ordEd25519KeyHash = {
    compare: Data_Function.on(Data_Ord.compare(Types_ByteArray.ordByteArray))($foreign.ed25519KeyHashToBytes),
    Eq0: function () {
        return eqEd25519KeyHash;
    }
};
var scriptHashToBech32 = $foreign["_scriptHashToBech32Impl"](FfiHelpers.maybeFfiHelper);
var scriptHashFromBytes = $foreign["_scriptHashFromBytesImpl"](FfiHelpers.maybeFfiHelper);
var decodeJsonScriptHash = {
    decodeJson: Data_Argonaut_Core.caseJsonObject(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected object")))(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $22 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Expected hex-encoded script hash"));
        var $23 = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(scriptHashFromBytes)(Types_ByteArray.hexToByteArray);
        return function ($24) {
            return $22($23($24));
        };
    })())(Data_Function.flip(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString))("getScriptHash")))
};
var fromDataScriptHash = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Bytes) {
            return scriptHashFromBytes(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }
};
var scriptHashFromBech32 = $foreign["_scriptHashFromBech32Impl"](FfiHelpers.maybeFfiHelper);
var ed25519KeyHashToBech32 = $foreign["_ed25519KeyHashToBech32Impl"](FfiHelpers.maybeFfiHelper);
var ed25519KeyHashFromBytes = $foreign["_ed25519KeyHashFromBytesImpl"](FfiHelpers.maybeFfiHelper);
var decodeJsonEd25519KeyHash = {
    decodeJson: Data_Argonaut_Core.caseJsonString(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Plutus BuiltinByteString")))(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $25 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Invalid Ed25519KeyHash"));
        return function ($26) {
            return $25(ed25519KeyHashFromBytes($26));
        };
    })())((function () {
        var $27 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Invalid ByteArray"));
        return function ($28) {
            return $27(Types_ByteArray.hexToByteArray($28));
        };
    })()))
};
var fromDataEd25519KeyHash = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Bytes) {
            return ed25519KeyHashFromBytes(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }
};
var ed25519KeyHashFromBech32 = $foreign["_ed25519KeyHashFromBech32Impl"](FfiHelpers.maybeFfiHelper);
module.exports = {
    ed25519KeyHashFromBytes: ed25519KeyHashFromBytes,
    ed25519KeyHashFromBech32: ed25519KeyHashFromBech32,
    ed25519KeyHashToBech32: ed25519KeyHashToBech32,
    scriptHashFromBytes: scriptHashFromBytes,
    scriptHashFromBech32: scriptHashFromBech32,
    scriptHashToBech32: scriptHashToBech32,
    eqEd25519KeyHash: eqEd25519KeyHash,
    ordEd25519KeyHash: ordEd25519KeyHash,
    showEd25519KeyHash: showEd25519KeyHash,
    toDataEd25519KeyHash: toDataEd25519KeyHash,
    fromDataEd25519KeyHash: fromDataEd25519KeyHash,
    decodeJsonEd25519KeyHash: decodeJsonEd25519KeyHash,
    eqScriptHash: eqScriptHash,
    ordScriptHash: ordScriptHash,
    showScriptHash: showScriptHash,
    toDataScriptHash: toDataScriptHash,
    fromDataScriptHash: fromDataScriptHash,
    decodeJsonScriptHash: decodeJsonScriptHash,
    ed25519KeyHashToBytes: $foreign.ed25519KeyHashToBytes,
    ed25519KeyHashToBech32Unsafe: $foreign.ed25519KeyHashToBech32Unsafe,
    scriptHashToBytes: $foreign.scriptHashToBytes,
    scriptHashToBech32Unsafe: $foreign.scriptHashToBech32Unsafe
};
