// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Argonaut_Decode_Combinators = require("../Data.Argonaut.Decode.Combinators/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_TextEncoder = require("../Data.TextEncoder/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var FromData = require("../FromData/index.js");
var Metadata_Helpers = require("../Metadata.Helpers/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var ToData = require("../ToData/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_PlutusData = require("../Types.PlutusData/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_Value = require("../Types.Value/index.js");
var Cip25MetadataFile = function (x) {
    return x;
};
var Cip25MetadataEntry = function (x) {
    return x;
};
var Cip25Metadata = function (x) {
    return x;
};
var toDataCip25MetadataFile = {
    toData: function (v) {
        return ToData.toData(ToData.toDataMap(ToData.toDataPlutusData)(ToData.toDataPlutusData))(Data_Map_Internal.fromFoldable(Types_PlutusData.ordPlutusData)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(ToData.toData(ToData.toDataString)("name"), ToData.toData(ToData.toDataString)(v.name)), new Data_Tuple.Tuple(ToData.toData(ToData.toDataString)("mediaType"), ToData.toData(ToData.toDataString)(v.mediaType)), new Data_Tuple.Tuple(ToData.toData(ToData.toDataString)("src"), ToData.toData(ToData.toDataNonEmpty(Data_Foldable.foldableArray)(ToData.toDataString))(v.uris)) ]));
    }
};
var newtypeCip25Metadata_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeCip25MetadataFile_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeCip25MetadataEntry = {
    Coercible0: function () {
        return undefined;
    }
};
var genericCip25Metadata_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericCip25MetadataFile_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showCip25MetadataFile = {
    show: Data_Show_Generic.genericShow(genericCip25MetadataFile_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "mediaType";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "name";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "uris";
        }
    })(Data_Show.showRecordFieldsNil)(Data_NonEmpty.showNonEmpty(Data_Show.showString)(Data_Show.showArray(Data_Show.showString))))(Data_Show.showString))(Data_Show.showString))))({
        reflectSymbol: function () {
            return "Cip25MetadataFile";
        }
    }))
};
var genericCip25MetadataEntry = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showCip25MetadataEntry = {
    show: Data_Show_Generic.genericShow(genericCip25MetadataEntry)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "assetName";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "description";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "files";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "imageUris";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "mediaType";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "policyId";
        }
    })(Data_Show.showRecordFieldsNil)(Types_Scripts.showMintingPolicyHash))(Data_Maybe.showMaybe(Data_Show.showString)))(Data_NonEmpty.showNonEmpty(Data_Show.showString)(Data_Show.showArray(Data_Show.showString))))(Data_Show.showArray(showCip25MetadataFile)))(Data_Show.showArray(Data_Show.showString)))(Types_Value.showTokenName))))({
        reflectSymbol: function () {
            return "Cip25MetadataEntry";
        }
    }))
};
var showCip25Metadata = {
    show: Data_Show_Generic.genericShow(genericCip25Metadata_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showCip25MetadataEntry)))({
        reflectSymbol: function () {
            return "Cip25Metadata";
        }
    }))
};
var fromDataCip25MetadataFile = {
    fromData: function (contents) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupKey("name")(contents))(FromData.fromData(FromData.fromDataString)))(function (name) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupKey("mediaType")(contents))(FromData.fromData(FromData.fromDataString)))(function (mediaType) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupKey("src")(contents))(FromData.fromData(FromData.fromDataNonEmptyArray(FromData.fromDataString))))(function (uris) {
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Newtype.wrap()({
                        name: name,
                        mediaType: mediaType,
                        uris: uris
                    }));
                });
            });
        });
    }
};
var eqCip25MetadataFile = {
    eq: function (x) {
        return function (y) {
            return x.mediaType === y.mediaType && x.name === y.name && Data_Eq.eq(Data_NonEmpty.eqNonEmpty(Data_Eq.eq1Array)(Data_Eq.eqString))(x.uris)(y.uris);
        };
    }
};
var eqCip25MetadataEntry = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Types_Value.eqTokenName)(x.assetName)(y.assetName) && Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(x.description)(y.description) && Data_Eq.eq(Data_Eq.eqArray(eqCip25MetadataFile))(x.files)(y.files) && Data_Eq.eq(Data_NonEmpty.eqNonEmpty(Data_Eq.eq1Array)(Data_Eq.eqString))(x.imageUris)(y.imageUris) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(x.mediaType)(y.mediaType) && Data_Eq.eq(Types_Scripts.eqMintingPolicyHash)(x.policyId)(y.policyId);
        };
    }
};
var eqCip25Metadata = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Data_Eq.eqArray(eqCip25MetadataEntry))(x)(y);
        };
    }
};
var nftMetadataLabel = "721";
var metadataEntryToData = function (v) {
    return ToData.toData(ToData.toDataMap(ToData.toDataPlutusData)(ToData.toDataPlutusData))(Data_Map_Internal.fromFoldable(Types_PlutusData.ordPlutusData)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(ToData.toData(ToData.toDataString)("name"), ToData.toData(Types_Value.toDataTokenName)(v.assetName)), new Data_Tuple.Tuple(ToData.toData(ToData.toDataString)("image"), ToData.toData(ToData.toDataNonEmpty(Data_Foldable.foldableArray)(ToData.toDataString))(v.imageUris)), new Data_Tuple.Tuple(ToData.toData(ToData.toDataString)("mediaType"), ToData.toData(ToData.toDataMaybe(ToData.toDataString))(v.mediaType)), new Data_Tuple.Tuple(ToData.toData(ToData.toDataString)("description"), ToData.toData(ToData.toDataArray(ToData.toDataString))(v.description)), new Data_Tuple.Tuple(ToData.toData(ToData.toDataString)("files"), ToData.toData(ToData.toDataArray(toDataCip25MetadataFile))(v.files)) ]));
};
var toDataCip25Metadata = {
    toData: function (v) {
        var groups = Data_Function.flip(Data_Array.groupBy)(v)(function (a) {
            return function (b) {
                return Data_Eq.eq(Types_Scripts.eqMintingPolicyHash)((Data_Newtype.unwrap()(a)).policyId)((Data_Newtype.unwrap()(b)).policyId);
            };
        });
        return ToData.toData(ToData.toDataMap(ToData.toDataPlutusData)(ToData.toDataMap(ToData.toDataPlutusData)(ToData.toDataMap(ToData.toDataPlutusData)(ToData.toDataPlutusData))))(Data_Map_Internal.singleton(ToData.toData(ToData.toDataString)(nftMetadataLabel))(Data_Map_Internal.fromFoldable(Types_PlutusData.ordPlutusData)(Data_Foldable.foldableArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(groups)(function (group) {
            return new Data_Tuple.Tuple(ToData.toData(Types_Scripts.toDataMintingPolicyHash)((function (v1) {
                return v1.policyId;
            })(Data_Newtype.unwrap()(Data_Array_NonEmpty.head(group)))), Data_Map_Internal.fromFoldable(Types_PlutusData.ordPlutusData)(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Function.flip(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray))(group)(function (entry) {
                return new Data_Tuple.Tuple(ToData.toData(Types_Value.toDataTokenName)((Data_Newtype.unwrap()(entry)).assetName), metadataEntryToData(entry));
            })));
        }))));
    }
};
var metadataEntryFromData = function (policyId) {
    return function (assetName) {
        return function (contents) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupKey("image")(contents))(FromData.fromData(FromData.fromDataNonEmptyArray(FromData.fromDataString))))(function (imageUris) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupKey("mediaType")(contents))(FromData.fromData(FromData.fromDataMaybe(FromData.fromDataString))))(function (mediaType) {
                    return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupKey("description")(contents))(FromData.fromData(FromData.fromDataArray(FromData.fromDataString))))(function (description) {
                        return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupKey("files")(contents))(FromData.fromData(FromData.fromDataArray(fromDataCip25MetadataFile))))(function (files) {
                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Newtype.wrap()({
                                policyId: policyId,
                                assetName: assetName,
                                imageUris: imageUris,
                                mediaType: mediaType,
                                description: description,
                                files: files
                            }));
                        });
                    });
                });
            });
        };
    };
};
var fromDataCip25Metadata = {
    fromData: function (meta) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupKey(nftMetadataLabel)(meta))(function (v) {
            if (v instanceof Types_PlutusData["Map"]) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.concat)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(v.value0)(function (v1) {
                    if (v1.value1 instanceof Types_PlutusData["Map"]) {
                        return Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(v1.value1.value0)(function (v2) {
                            return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(metadataEntryFromData)(FromData.fromData(Types_Scripts.fromDataMintingPolicyHash)(v1.value0)))(FromData.fromData(Types_Value.fromDataTokenName)(v2.value0)))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v2.value1));
                        });
                    };
                    return Data_Maybe.Nothing.value;
                }));
            };
            return Data_Maybe.Nothing.value;
        }))(function (entries) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap())(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(entries));
        });
    }
};
var errExpectedObject = new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected object"));
var errExpectedNonEmptyArray = new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected non-empty array"));
var errExpectedArray = new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected array"));
var decodeStringArray = function ($copy_json) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(json) {
        if (Data_Argonaut_Core.isString(json)) {
            $copy_json = Data_Argonaut_Core.jsonSingletonArray(json);
            return;
        };
        if (Data_Boolean.otherwise) {
            $tco_done = true;
            return Data_Function.flip(Data_Argonaut_Core.caseJsonArray(errExpectedArray))(json)((function () {
                var $82 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Expected UTF-8 encoded string"));
                var $83 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Argonaut_Core.toString);
                return function ($84) {
                    return $82($83($84));
                };
            })());
        };
        throw new Error("Failed pattern match at Metadata.Cip25 (line 233, column 1 - line 234, column 56): " + [ json.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_json);
    };
    return $tco_result;
};
var decodeNonEmptyStringArray = function (json) {
    return Control_Bind.bind(Data_Either.bindEither)(decodeStringArray(json))(function (arr) {
        var v = Data_Array.uncons(arr);
        if (v instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_NonEmpty.NonEmpty(v.value0.head, v.value0.tail));
        };
        if (v instanceof Data_Maybe.Nothing) {
            return errExpectedNonEmptyArray;
        };
        throw new Error("Failed pattern match at Metadata.Cip25 (line 247, column 5 - line 249, column 42): " + [ v.constructor.name ]);
    });
};
var decodeJsonCip25MetadataFi = {
    decodeJson: Data_Argonaut_Core.caseJsonObject(errExpectedObject)(function (obj) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("name"))(function (name) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("mediaType"))(function (mediaType) {
                return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(decodeNonEmptyStringArray)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonJson)(obj)("src")))(function (uris) {
                    return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                        name: name,
                        mediaType: mediaType,
                        uris: uris
                    }));
                });
            });
        });
    })
};
var metadataEntryDecodeJson = function (policyId) {
    return function (assetName) {
        return Data_Argonaut_Core.caseJsonObject(errExpectedObject)(function (obj) {
            return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonJson)(obj)("image"))(decodeNonEmptyStringArray))(function (imageUris) {
                return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJsonString)(obj)("mediaType"))(function (mediaType) {
                    return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJsonJson)(obj)("description"))(Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Monoid.mempty(Data_Monoid.monoidArray)))(decodeStringArray)))(function (description) {
                        return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJsonJson)(obj)("files"))(function (arr) {
                            return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Monoid.mempty(Data_Monoid.monoidArray)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Argonaut_Decode_Class.decodeJson(decodeJsonCip25MetadataFi)))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Argonaut_Core.toArray)(arr));
                        }))(function (files) {
                            return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                                policyId: policyId,
                                assetName: assetName,
                                imageUris: imageUris,
                                mediaType: mediaType,
                                description: description,
                                files: files
                            }));
                        });
                    });
                });
            });
        });
    };
};
var decodeJsonCip25Metadata = {
    decodeJson: (function () {
        var withJsonObject = Data_Function.flip(Data_Argonaut_Core.caseJsonObject(errExpectedObject));
        var objToArray = Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray);
        var decodePolicyId = (function () {
            var $85 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Expected hex-encoded policy id"));
            var $86 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap());
            var $87 = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(Serialization_Hash.scriptHashFromBytes)(Types_ByteArray.hexToByteArray);
            return function ($88) {
                return $85($86($87($88)));
            };
        })();
        var decodeAssetName = (function () {
            var $89 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Expected UTF-8 encoded asset name"));
            var $90 = Data_Newtype.wrap();
            return function ($91) {
                return $89(Types_Value.mkTokenName($90(Data_TextEncoder.encodeUtf8($91))));
            };
        })();
        return Data_Argonaut_Core.caseJsonObject(errExpectedObject)(function (obj) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonJson)(obj)(nftMetadataLabel))(function (policies) {
                return withJsonObject(policies)(function (objPolicies) {
                    return Data_Functor.map(Data_Either.functorEither)((function () {
                        var $92 = Data_Newtype.wrap();
                        return function ($93) {
                            return $92(Data_Array.concat($93));
                        };
                    })())(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(objToArray(objPolicies))(function (v) {
                        return withJsonObject(v.value1)(function (objAssets) {
                            return Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(objToArray(objAssets))(function (v1) {
                                return Control_Bind.bind(Data_Either.bindEither)(decodePolicyId(v.value0))(function (policyId_) {
                                    return Control_Bind.bind(Data_Either.bindEither)(decodeAssetName(v1.value0))(function (assetName_) {
                                        return metadataEntryDecodeJson(policyId_)(assetName_)(v1.value1);
                                    });
                                });
                            });
                        });
                    }));
                });
            });
        });
    })()
};
module.exports = {
    Cip25Metadata: Cip25Metadata,
    Cip25MetadataEntry: Cip25MetadataEntry,
    Cip25MetadataFile: Cip25MetadataFile,
    genericCip25MetadataFile_: genericCip25MetadataFile_,
    newtypeCip25MetadataFile_: newtypeCip25MetadataFile_,
    eqCip25MetadataFile: eqCip25MetadataFile,
    showCip25MetadataFile: showCip25MetadataFile,
    toDataCip25MetadataFile: toDataCip25MetadataFile,
    fromDataCip25MetadataFile: fromDataCip25MetadataFile,
    decodeJsonCip25MetadataFi: decodeJsonCip25MetadataFi,
    genericCip25MetadataEntry: genericCip25MetadataEntry,
    newtypeCip25MetadataEntry: newtypeCip25MetadataEntry,
    eqCip25MetadataEntry: eqCip25MetadataEntry,
    showCip25MetadataEntry: showCip25MetadataEntry,
    genericCip25Metadata_: genericCip25Metadata_,
    newtypeCip25Metadata_: newtypeCip25Metadata_,
    eqCip25Metadata: eqCip25Metadata,
    showCip25Metadata: showCip25Metadata,
    toDataCip25Metadata: toDataCip25Metadata,
    fromDataCip25Metadata: fromDataCip25Metadata,
    decodeJsonCip25Metadata: decodeJsonCip25Metadata
};
