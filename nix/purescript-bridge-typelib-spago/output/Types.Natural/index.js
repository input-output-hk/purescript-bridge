// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var ToData = require("../ToData/index.js");
var Types_PlutusData = require("../Types.PlutusData/index.js");
var Natural = function (x) {
    return x;
};
var toDataNatural = {
    toData: function (v) {
        return ToData.toData(ToData.toDataBigInt)(v);
    }
};
var showNatural = {
    show: function (v) {
        return "(fromBigInt' (BigInt." + (Data_Show.show(Data_BigInt.showBigInt)(v) + "))");
    }
};
var semiringNatural = Data_BigInt.semiringBigInt;
var ordNatural = Data_BigInt.ordBigInt;
var eqNatural = Data_BigInt.eqBigInt;
var toBigInt = function (v) {
    return v;
};
var fromBigInt$prime = function (n) {
    var $15 = Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(n)(Data_BigInt.fromInt(0));
    if ($15) {
        return n;
    };
    return Data_Ring.negate(Data_BigInt.ringBigInt)(n);
};
var fromBigInt = function (n) {
    var $16 = Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(n)(Data_BigInt.fromInt(0));
    if ($16) {
        return Data_Maybe.Just.create(n);
    };
    return Data_Maybe.Nothing.value;
};
var fromString = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromBigInt)(Data_BigInt.fromString);
var decodeAesonNatural = {
    decodeAeson: Aeson.caseAesonBigInt(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected BigInt from Aeson decoding")))(function (bi) {
        return Data_Either.note(Data_Argonaut_Decode_Error.TypeMismatch.create("Invalid Natural number: " + Data_Show.show(Data_BigInt.showBigInt)(bi)))(fromBigInt(bi));
    })
};
var decodeJsonNatural = {
    decodeJson: (function () {
        var $19 = Aeson.decodeAeson(decodeAesonNatural);
        return function ($20) {
            return $19(Aeson.jsonToAeson($20));
        };
    })()
};
var fromDataNatural = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Integer) {
            return fromBigInt(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }
};
var binaryOnBigInt = function (bin) {
    return function (n) {
        var $21 = Data_Function.on(bin)(toBigInt)(n);
        return function ($22) {
            return fromBigInt($21($22));
        };
    };
};
var minus = function (n) {
    var $23 = Data_Maybe.fromMaybe(Data_Semiring.zero(semiringNatural));
    var $24 = binaryOnBigInt(Data_Ring.sub(Data_BigInt.ringBigInt))(n);
    return function ($25) {
        return $23($24($25));
    };
};
module.exports = {
    binaryOnBigInt: binaryOnBigInt,
    fromBigInt: fromBigInt,
    "fromBigInt'": fromBigInt$prime,
    fromString: fromString,
    minus: minus,
    toBigInt: toBigInt,
    eqNatural: eqNatural,
    ordNatural: ordNatural,
    semiringNatural: semiringNatural,
    showNatural: showNatural,
    fromDataNatural: fromDataNatural,
    toDataNatural: toDataNatural,
    decodeAesonNatural: decodeAesonNatural,
    decodeJsonNatural: decodeJsonNatural
};
