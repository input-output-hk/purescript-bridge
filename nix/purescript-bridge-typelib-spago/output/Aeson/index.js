// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Argonaut_Encode_Encoders = require("../Data.Argonaut.Encode.Encoders/index.js");
var Data_Argonaut_Parser = require("../Data.Argonaut.Parser/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Typelevel_Undefined = require("../Data.Typelevel.Undefined/index.js");
var Data_UInt = require("../Data.UInt/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Record = require("../Record/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var Untagged_Union = require("../Untagged.Union/index.js");
var AesonPatchedJson = function (x) {
    return x;
};
var Aeson = function (x) {
    return x;
};
var gDecodeAesonRowNil = {
    gDecodeAeson: function (v) {
        return function (v1) {
            return new Data_Either.Right({});
        };
    }
};
var decodeAesonAeson = {
    decodeAeson: Control_Applicative.pure(Data_Either.applicativeEither)
};
var stringifyAeson = function (v) {
    return $foreign.stringifyAeson_(v.numberIndex)(v.patchedJson);
};
var eqAeson = {
    eq: function (a) {
        return function (b) {
            return stringifyAeson(a) === stringifyAeson(b);
        };
    }
};
var showAeson = {
    show: stringifyAeson
};
var parseJsonStringToAeson = function (payload) {
    var v = $foreign.parseJsonExtractingIntegers(payload);
    return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Function["const"](Data_Argonaut_Decode_Error.MissingValue.value))(Data_Functor.map(Data_Either.functorEither)(AesonPatchedJson)(Data_Argonaut_Parser.jsonParser(v.patchedPayload))))(function (patchedJson) {
        return Control_Applicative.pure(Data_Either.applicativeEither)({
            numberIndex: v.numberIndex,
            patchedJson: patchedJson
        });
    });
};
var getNumberIndex = function (v) {
    return v.numberIndex;
};
var gDecodeAeson = function (dict) {
    return dict.gDecodeAeson;
};
var decodeAesonViaJson = function (dictDecodeJson) {
    return function (v) {
        return Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v.patchedJson);
    };
};
var decodeIntegral = function (parse) {
    return function (v) {
        return Control_Bind.bind(Data_Either.bindEither)(decodeAesonViaJson(Data_Argonaut_Decode_Class.decodeJsonInt)(v))(function (ix) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(Data_Argonaut_Decode_Error.MissingValue.value)(Data_Array.index(v.numberIndex)(ix)))(function (numberStr) {
                return Data_Either.note(Data_Argonaut_Decode_Error.TypeMismatch.create("Couldn't parse to integral: " + numberStr))(parse(numberStr));
            });
        });
    };
};
var decodeAesonBigInt = {
    decodeAeson: decodeIntegral(Data_BigInt.fromString)
};
var decodeAesonInt = {
    decodeAeson: decodeIntegral(Data_Int.fromString)
};
var decodeAesonUInt = {
    decodeAeson: decodeIntegral(Data_UInt.fromString)
};
var decodeAesonBoolean = {
    decodeAeson: decodeAesonViaJson(Data_Argonaut_Decode_Class.decodeJsonBoolean)
};
var decodeAesonNumber = {
    decodeAeson: decodeAesonViaJson(Data_Argonaut_Decode_Class.decodeJsonNumber)
};
var decodeAesonString = {
    decodeAeson: decodeAesonViaJson(Data_Argonaut_Decode_Class.decodeJsonString)
};
var decodeAesonField = function (dict) {
    return dict.decodeAesonField;
};
var gDecodeAesonCons = function (dictDecodeAesonField) {
    return function (dictGDecodeAeson) {
        return function (dictIsSymbol) {
            return function (dictCons) {
                return function (dictLacks) {
                    return {
                        gDecodeAeson: function (object) {
                            return function (v) {
                                var fieldName = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                var fieldValue = Foreign_Object.lookup(fieldName)(object);
                                var v1 = decodeAesonField(dictDecodeAesonField)(fieldValue);
                                if (v1 instanceof Data_Maybe.Just) {
                                    return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(fieldName))(v1.value0))(function (val) {
                                        return Control_Bind.bind(Data_Either.bindEither)(gDecodeAeson(dictGDecodeAeson)(object)(Type_Proxy["Proxy"].value))(function (rest) {
                                            return Data_Either.Right.create(Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(val)(rest));
                                        });
                                    });
                                };
                                if (v1 instanceof Data_Maybe.Nothing) {
                                    return Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(fieldName, Data_Argonaut_Decode_Error.MissingValue.value));
                                };
                                throw new Error("Failed pattern match at Aeson (line 460, column 5 - line 467, column 44): " + [ v1.constructor.name ]);
                            };
                        }
                    };
                };
            };
        };
    };
};
var decodeAeson = function (dict) {
    return dict.decodeAeson;
};
var decodeJsonString = function (dictDecodeAeson) {
    return Control_Bind.composeKleisli(Data_Either.bindEither)(parseJsonStringToAeson)(decodeAeson(dictDecodeAeson));
};
var jsonToAeson = (function () {
    var $111 = Data_Either.fromRight(Data_Typelevel_Undefined["undefined"]);
    var $112 = decodeJsonString(decodeAesonAeson);
    return function ($113) {
        return $111($112(Data_Argonaut_Core.stringify($113)));
    };
})();
var getField = function (dictDecodeAeson) {
    return function (aesonObject) {
        return function (field) {
            var getField$prime = function (decoder) {
                return function (obj) {
                    return function (str) {
                        return Data_Maybe.maybe(Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(str, Data_Argonaut_Decode_Error.MissingValue.value)))((function () {
                            var $114 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                            return function ($115) {
                                return $114(decoder($115));
                            };
                        })())(Foreign_Object.lookup(str)(obj));
                    };
                };
            };
            return getField$prime(decodeAeson(dictDecodeAeson))(aesonObject)(field);
        };
    };
};
var getFieldOptional = function (dictDecodeAeson) {
    var getFieldOptional_ = function (decoder) {
        return function (obj) {
            return function (str) {
                var decode = (function () {
                    var $116 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                    return function ($117) {
                        return $116(decoder($117));
                    };
                })();
                return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))((function () {
                    var $118 = Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create);
                    return function ($119) {
                        return $118(decode($119));
                    };
                })())(Foreign_Object.lookup(str)(obj));
            };
        };
    };
    return getFieldOptional_(decodeAeson(dictDecodeAeson));
};
var getFieldOptional$prime = function (dictDecodeAeson) {
    var getFieldOptional$prime_ = function (decoder) {
        return function (obj) {
            return function (str) {
                var decode = function (v) {
                    var $85 = Data_Argonaut_Core.isNull(v.patchedJson);
                    if ($85) {
                        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
                    };
                    return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str))(decoder(v)));
                };
                return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(decode)(Foreign_Object.lookup(str)(obj));
            };
        };
    };
    return getFieldOptional$prime_(decodeAeson(dictDecodeAeson));
};
var decodeAeson1 = function (dictTraversable) {
    return function (dictDecodeAeson) {
        return function (dictDecodeJson) {
            return {
                decodeAeson: function (v) {
                    return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Functor.map(dictTraversable.Functor0())(AesonPatchedJson))(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v.patchedJson)))(function (v1) {
                        return Data_Traversable["for"](Data_Either.applicativeEither)(dictTraversable)(v1)(function (patchedJson) {
                            return decodeAeson(dictDecodeAeson)({
                                patchedJson: patchedJson,
                                numberIndex: v.numberIndex
                            });
                        });
                    });
                }
            };
        };
    };
};
var decodeAesonField1 = function (dictDecodeAeson) {
    return {
        decodeAesonField: function (j) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(decodeAeson(dictDecodeAeson))(j);
        }
    };
};
var decodeAesonFieldMaybe = function (dictDecodeAeson) {
    return {
        decodeAesonField: (function () {
            var $120 = Data_Maybe.maybe(new Data_Either.Right(Data_Maybe.Nothing.value))(decodeAeson(decodeAeson1(Data_Traversable.traversableMaybe)(dictDecodeAeson)(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonJson))));
            return function ($121) {
                return Data_Maybe.Just.create($120($121));
            };
        })()
    };
};
var decodeAeson$bar$plus$bar = function (dictInOneOf) {
    return function (dictDecodeAeson) {
        return function (dictDecodeAeson1) {
            return {
                decodeAeson: function (j) {
                    return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(Untagged_Union.asOneOf())(decodeAeson(dictDecodeAeson)(j)))(Data_Functor.map(Data_Either.functorEither)(Untagged_Union.asOneOf())(decodeAeson(dictDecodeAeson1)(j)));
                }
            };
        };
    };
};
var constAesonCases = function (v) {
    var c = Data_Function["const"](v);
    return {
        caseObject: c,
        caseNull: c,
        caseBoolean: c,
        caseString: c,
        caseNumber: c,
        caseArray: c
    };
};
var caseAeson = function (v) {
    return function (v1) {
        var unsafeIndex = function (arr) {
            return function (ix) {
                return arr[ix];
            };
        };
        var mkAeson = function (json) {
            return {
                patchedJson: json,
                numberIndex: v1.numberIndex
            };
        };
        return Data_Argonaut_Core.caseJson(v.caseNull)(v.caseBoolean)((function () {
            var $122 = unsafeIndex(v1.numberIndex);
            return function ($123) {
                return v.caseNumber($122(Data_Int.round($123)));
            };
        })())(v.caseString)((function () {
            var $124 = Data_Functor.map(Data_Functor.functorArray)(mkAeson);
            return function ($125) {
                return v.caseArray($124($125));
            };
        })())((function () {
            var $126 = Data_Functor.map(Foreign_Object.functorObject)(mkAeson);
            return function ($127) {
                return v.caseObject($126($127));
            };
        })())(v1.patchedJson);
    };
};
var caseAesonArray = function (def) {
    return function (f) {
        return caseAeson((function (v) {
            return {
                caseArray: f,
                caseBoolean: v.caseBoolean,
                caseNull: v.caseNull,
                caseNumber: v.caseNumber,
                caseObject: v.caseObject,
                caseString: v.caseString
            };
        })(constAesonCases(def)));
    };
};
var caseAesonBoolean = function (def) {
    return function (f) {
        return caseAeson((function (v) {
            return {
                caseBoolean: f,
                caseArray: v.caseArray,
                caseNull: v.caseNull,
                caseNumber: v.caseNumber,
                caseObject: v.caseObject,
                caseString: v.caseString
            };
        })(constAesonCases(def)));
    };
};
var caseAesonNull = function (def) {
    return function (f) {
        return caseAeson((function (v) {
            return {
                caseNull: f,
                caseArray: v.caseArray,
                caseBoolean: v.caseBoolean,
                caseNumber: v.caseNumber,
                caseObject: v.caseObject,
                caseString: v.caseString
            };
        })(constAesonCases(def)));
    };
};
var caseAesonNumber = function (def) {
    return function (f) {
        return caseAeson((function (v) {
            return {
                caseNumber: f,
                caseArray: v.caseArray,
                caseBoolean: v.caseBoolean,
                caseNull: v.caseNull,
                caseObject: v.caseObject,
                caseString: v.caseString
            };
        })(constAesonCases(def)));
    };
};
var caseAesonBigInt = function (def) {
    return function (f) {
        return caseAesonNumber(def)(function (str) {
            var v = Data_BigInt.fromString(str);
            if (v instanceof Data_Maybe.Nothing) {
                return def;
            };
            if (v instanceof Data_Maybe.Just) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Aeson (line 350, column 3 - line 352, column 22): " + [ v.constructor.name ]);
        });
    };
};
var caseAesonUInt = function (def) {
    return function (f) {
        return caseAesonNumber(def)(function (str) {
            var v = Data_UInt.fromString(str);
            if (v instanceof Data_Maybe.Nothing) {
                return def;
            };
            if (v instanceof Data_Maybe.Just) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Aeson (line 343, column 3 - line 345, column 22): " + [ v.constructor.name ]);
        });
    };
};
var caseAesonObject = function (def) {
    return function (f) {
        return caseAeson((function (v) {
            return {
                caseObject: f,
                caseArray: v.caseArray,
                caseBoolean: v.caseBoolean,
                caseNull: v.caseNull,
                caseNumber: v.caseNumber,
                caseString: v.caseString
            };
        })(constAesonCases(def)));
    };
};
var caseAesonString = function (def) {
    return function (f) {
        return caseAeson((function (v) {
            return {
                caseString: f,
                caseArray: v.caseArray,
                caseBoolean: v.caseBoolean,
                caseNull: v.caseNull,
                caseNumber: v.caseNumber,
                caseObject: v.caseObject
            };
        })(constAesonCases(def)));
    };
};
var toObject = caseAeson((function (v) {
    return {
        caseObject: Data_Maybe.Just.create,
        caseArray: v.caseArray,
        caseBoolean: v.caseBoolean,
        caseNull: v.caseNull,
        caseNumber: v.caseNumber,
        caseString: v.caseString
    };
})(constAesonCases(Data_Maybe.Nothing.value)));
var decodeAesonRecord = function (dictGDecodeAeson) {
    return function (dictRowToList) {
        return {
            decodeAeson: function (json) {
                var v = toObject(json);
                if (v instanceof Data_Maybe.Just) {
                    return gDecodeAeson(dictGDecodeAeson)(v.value0)(Type_Proxy["Proxy"].value);
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
                };
                throw new Error("Failed pattern match at Aeson (line 410, column 5 - line 412, column 46): " + [ v.constructor.name ]);
            }
        };
    };
};
var toStringifiedNumbersJson = Control_Lazy.fix(Control_Lazy.lazyFn)(function (v) {
    return caseAeson({
        caseNull: Data_Function["const"](Data_Argonaut_Core.jsonNull),
        caseBoolean: Data_Argonaut_Encode_Encoders.encodeBoolean,
        caseNumber: Data_Argonaut_Encode_Encoders.encodeString,
        caseString: Data_Argonaut_Encode_Encoders.encodeString,
        caseArray: (function () {
            var $128 = Data_Functor.map(Data_Functor.functorArray)(toStringifiedNumbersJson);
            return function ($129) {
                return Data_Argonaut_Core.fromArray($128($129));
            };
        })(),
        caseObject: (function () {
            var $130 = Data_Functor.map(Foreign_Object.functorObject)(toStringifiedNumbersJson);
            return function ($131) {
                return Data_Argonaut_Core.fromObject($130($131));
            };
        })()
    });
});
var getNestedAeson = function (v) {
    return function (keys) {
        var mkAeson = function (json) {
            return {
                numberIndex: v.numberIndex,
                patchedJson: json
            };
        };
        var lookup = function (j) {
            return function (lbl) {
                return Data_Argonaut_Core.caseJsonObject(Data_Maybe.Nothing.value)(Foreign_Object.lookup(lbl))(j);
            };
        };
        return Data_Either.note(Data_Argonaut_Decode_Error.UnexpectedValue.create(toStringifiedNumbersJson(v)))(Data_Functor.map(Data_Maybe.functorMaybe)(mkAeson)(Data_Array.foldM(Data_Maybe.monadMaybe)(lookup)(v.patchedJson)(keys)));
    };
};
var decodeAesonJson = {
    decodeAeson: function ($132) {
        return Data_Either.Right.create(toStringifiedNumbersJson($132));
    }
};
module.exports = {
    caseAeson: caseAeson,
    caseAesonArray: caseAesonArray,
    caseAesonBoolean: caseAesonBoolean,
    caseAesonNull: caseAesonNull,
    caseAesonObject: caseAesonObject,
    caseAesonString: caseAesonString,
    caseAesonNumber: caseAesonNumber,
    caseAesonUInt: caseAesonUInt,
    caseAesonBigInt: caseAesonBigInt,
    constAesonCases: constAesonCases,
    decodeAeson: decodeAeson,
    decodeAesonField: decodeAesonField,
    decodeJsonString: decodeJsonString,
    gDecodeAeson: gDecodeAeson,
    getField: getField,
    getFieldOptional: getFieldOptional,
    "getFieldOptional'": getFieldOptional$prime,
    getNestedAeson: getNestedAeson,
    getNumberIndex: getNumberIndex,
    jsonToAeson: jsonToAeson,
    parseJsonStringToAeson: parseJsonStringToAeson,
    stringifyAeson: stringifyAeson,
    toObject: toObject,
    toStringifiedNumbersJson: toStringifiedNumbersJson,
    eqAeson: eqAeson,
    showAeson: showAeson,
    decodeAesonUInt: decodeAesonUInt,
    decodeAesonInt: decodeAesonInt,
    decodeAesonBigInt: decodeAesonBigInt,
    decodeAesonBoolean: decodeAesonBoolean,
    decodeAesonString: decodeAesonString,
    decodeAesonNumber: decodeAesonNumber,
    decodeAesonJson: decodeAesonJson,
    decodeAesonAeson: decodeAesonAeson,
    decodeAesonRecord: decodeAesonRecord,
    "decodeAeson|+|": decodeAeson$bar$plus$bar,
    decodeAeson1: decodeAeson1,
    gDecodeAesonRowNil: gDecodeAesonRowNil,
    gDecodeAesonCons: gDecodeAesonCons,
    decodeAesonFieldMaybe: decodeAesonFieldMaybe,
    decodeAesonField1: decodeAesonField1
};
