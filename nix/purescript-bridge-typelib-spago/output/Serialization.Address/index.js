// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Aeson = require("../Aeson/index.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_UInt = require("../Data.UInt/index.js");
var FfiHelpers = require("../FfiHelpers/index.js");
var FromData = require("../FromData/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var ToData = require("../ToData/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_PlutusData = require("../Types.PlutusData/index.js");
var TransactionIndex = function (x) {
    return x;
};
var Slot = function (x) {
    return x;
};
var TestnetId = (function () {
    function TestnetId() {

    };
    TestnetId.value = new TestnetId();
    return TestnetId;
})();
var MainnetId = (function () {
    function MainnetId() {

    };
    MainnetId.value = new MainnetId();
    return MainnetId;
})();
var CertificateIndex = function (x) {
    return x;
};
var ByronProtocolMagic = function (x) {
    return x;
};
var BlockId = function (x) {
    return x;
};
var toDataTransactionIndex = ToData.toDataUInt;
var toDataStakeCredential = {
    toData: (function () {
        var $149 = ToData.toData(ToData.toDataByteArray);
        return function ($150) {
            return $149($foreign.stakeCredentialToBytes($150));
        };
    })()
};
var toDataSlot = ToData.toDataUInt;
var toDataCertificateIndex = ToData.toDataUInt;
var toDataAddress = {
    toData: function (addr) {
        return ToData.toData(ToData.toDataByteArray)($foreign.addressBytes(addr));
    }
};
var toDataBaseAddress = {
    toData: (function () {
        var $151 = ToData.toData(toDataAddress);
        return function ($152) {
            return $151($foreign.baseAddressToAddress($152));
        };
    })()
};
var toDataByronAddress = {
    toData: (function () {
        var $153 = ToData.toData(toDataAddress);
        return function ($154) {
            return $153($foreign.byronAddressToAddress($154));
        };
    })()
};
var toDataEnterpriseAddress = {
    toData: (function () {
        var $155 = ToData.toData(toDataAddress);
        return function ($156) {
            return $155($foreign.enterpriseAddressToAddress($156));
        };
    })()
};
var toDataPointerAddress = {
    toData: (function () {
        var $157 = ToData.toData(toDataAddress);
        return function ($158) {
            return $157($foreign.pointerAddressToAddress($158));
        };
    })()
};
var showAddress = {
    show: function (a) {
        return "(Address " + ($foreign.addressBech32(a) + ")");
    }
};
var semigroupSlot = {
    append: function (v) {
        return function (v1) {
            return Slot(Data_Semiring.add(Data_UInt.uintSemiring)(v)(v1));
        };
    }
};
var ordSlot = Data_UInt.uintOrd;
var newtypeTransactionIndex_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeSlot_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeCertificateIndex_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeBlockId_ = {
    Coercible0: function () {
        return undefined;
    }
};
var monoidSlot = {
    mempty: Data_Semiring.zero(Data_UInt.uintSemiring),
    Semigroup0: function () {
        return semigroupSlot;
    }
};
var genericTransactionIndex_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showTransactionIndex = {
    show: Data_Show_Generic.genericShow(genericTransactionIndex_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_UInt.uintShowInstance))({
        reflectSymbol: function () {
            return "TransactionIndex";
        }
    }))
};
var genericSlot_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showSlot = {
    show: Data_Show_Generic.genericShow(genericSlot_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_UInt.uintShowInstance))({
        reflectSymbol: function () {
            return "Slot";
        }
    }))
};
var genericNetworkId_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return TestnetId.value;
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return MainnetId.value;
        };
        throw new Error("Failed pattern match at Serialization.Address (line 374, column 1 - line 374, column 36): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof TestnetId) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof MainnetId) {
            return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
        };
        throw new Error("Failed pattern match at Serialization.Address (line 374, column 1 - line 374, column 36): " + [ x.constructor.name ]);
    }
};
var showNetworkId = {
    show: Data_Show_Generic.genericShow(genericNetworkId_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "TestnetId";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "MainnetId";
        }
    })))
};
var genericCertificateIndex_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showCertificateIndex = {
    show: Data_Show_Generic.genericShow(genericCertificateIndex_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_UInt.uintShowInstance))({
        reflectSymbol: function () {
            return "CertificateIndex";
        }
    }))
};
var genericBlockId_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showBlockId = {
    show: Data_Show_Generic.genericShow(genericBlockId_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_UInt.uintShowInstance))({
        reflectSymbol: function () {
            return "BlockId";
        }
    }))
};
var fromDataTransactionIndex = FromData.fromDataUInt;
var fromDataSlot = FromData.fromDataUInt;
var fromDataCertificateIndex = FromData.fromDataUInt;
var eqTransactionIndex = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Data_UInt.uintEqInstance)(x)(y);
        };
    }
};
var ordTransactionIndex = {
    compare: function (x) {
        return function (y) {
            return Data_Ord.compare(Data_UInt.uintOrd)(x)(y);
        };
    },
    Eq0: function () {
        return eqTransactionIndex;
    }
};
var eqStakeCredential = {
    eq: Data_Function.on(Data_Eq.eq(Types_ByteArray.eqByteArray))($foreign.stakeCredentialToBytes)
};
var ordStakeCredential = {
    compare: Data_Function.on(Data_Ord.compare(Types_ByteArray.ordByteArray))($foreign.stakeCredentialToBytes),
    Eq0: function () {
        return eqStakeCredential;
    }
};
var eqSlot = Data_UInt.uintEqInstance;
var eqNetworkId = {
    eq: function (x) {
        return function (y) {
            if (x instanceof TestnetId && y instanceof TestnetId) {
                return true;
            };
            if (x instanceof MainnetId && y instanceof MainnetId) {
                return true;
            };
            return false;
        };
    }
};
var eqCertificateIndex = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Data_UInt.uintEqInstance)(x)(y);
        };
    }
};
var ordCertificateIndex = {
    compare: function (x) {
        return function (y) {
            return Data_Ord.compare(Data_UInt.uintOrd)(x)(y);
        };
    },
    Eq0: function () {
        return eqCertificateIndex;
    }
};
var eqBlockId = Data_UInt.uintEqInstance;
var eqAddress = {
    eq: Data_Function.on(Data_Eq.eq(Types_ByteArray.eqByteArray))($foreign.addressBytes)
};
var eqBaseAddress = {
    eq: Data_Function.on(Data_Eq.eq(eqAddress))($foreign.baseAddressToAddress)
};
var eqByronAddress = {
    eq: Data_Function.on(Data_Eq.eq(eqAddress))($foreign.byronAddressToAddress)
};
var eqEnterpriseAddress = {
    eq: Data_Function.on(Data_Eq.eq(eqAddress))($foreign.enterpriseAddressToAddress)
};
var eqPointerAddress = {
    eq: Data_Function.on(Data_Eq.eq(eqAddress))($foreign.pointerAddressToAddress)
};
var eqRewardAddress = {
    eq: Data_Function.on(Data_Eq.eq(eqAddress))($foreign.rewardAddressToAddress)
};
var ordAddress = {
    compare: Data_Function.on(Data_Ord.compare(Types_ByteArray.ordByteArray))($foreign.addressBytes),
    Eq0: function () {
        return eqAddress;
    }
};
var encodeJsonSlot = {
    encodeJson: function (v) {
        return Data_Argonaut_Core.fromNumber(Data_UInt.toNumber(v));
    }
};
var encodeJsonBlockId = {
    encodeJson: function (v) {
        return Data_Argonaut_Core.fromNumber(Data_UInt.toNumber(v));
    }
};
var decodeJsonSlot = {
    decodeJson: (function () {
        var $159 = Aeson.caseAesonObject(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected object")))(Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Function.flip(Aeson.getField(Aeson.decodeAesonUInt))("getSlot"))((function () {
            var $161 = Control_Applicative.pure(Data_Either.applicativeEither);
            return function ($162) {
                return $161(Slot($162));
            };
        })()));
        return function ($160) {
            return $159(Aeson.jsonToAeson($160));
        };
    })()
};
var decodeAesonSlot = Aeson.decodeAesonUInt;
var stakeCredentialToScriptHash = $foreign.withStakeCredential({
    onKeyHash: Data_Function["const"](Data_Maybe.Nothing.value),
    onScriptHash: Data_Maybe.Just.create
});
var stakeCredentialToKeyHash = $foreign.withStakeCredential({
    onKeyHash: Data_Maybe.Just.create,
    onScriptHash: Data_Function["const"](Data_Maybe.Nothing.value)
});
var stakeCredentialFromBytes = $foreign["_stakeCredentialFromBytes"](FfiHelpers.maybeFfiHelper);
var fromDataStakeCredential = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Bytes) {
            return stakeCredentialFromBytes(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }
};
var showVia = function (dictShow) {
    return function (nm) {
        return function (toShowable) {
            return function (addr) {
                return "(" + (nm + (" " + (Data_Show.show(dictShow)(toShowable(addr)) + ")")));
            };
        };
    };
};
var showBaseAddress = {
    show: showVia(showAddress)("BaseAddress")($foreign.baseAddressToAddress)
};
var showByronAddress = {
    show: showVia(showAddress)("ByronAddress")($foreign.byronAddressToAddress)
};
var showEnterpriseAddress = {
    show: showVia(showAddress)("EnterpriseAddress")($foreign.enterpriseAddressToAddress)
};
var showPointerAddress = {
    show: showVia(showAddress)("PointerAddress")($foreign.pointerAddressToAddress)
};
var showRewardAddress = {
    show: showVia(showAddress)("RewardAddress")($foreign.rewardAddressToAddress)
};
var showStakeCredential = {
    show: showVia(Data_Show.showString)("StakeCredenetial")($foreign.withStakeCredential({
        onKeyHash: Data_Show.show(Serialization_Hash.showEd25519KeyHash),
        onScriptHash: Data_Show.show(Serialization_Hash.showScriptHash)
    }))
};
var rewardAddressFromAddress = $foreign["_rewardAddressFromAddress"](FfiHelpers.maybeFfiHelper);
var rewardAddressBytes = function ($163) {
    return $foreign.addressBytes($foreign.rewardAddressToAddress($163));
};
var ordRewardAddress = {
    compare: Data_Function.on(Data_Ord.compare(Types_ByteArray.ordByteArray))(rewardAddressBytes),
    Eq0: function () {
        return eqRewardAddress;
    }
};
var toDataRewardAddress = {
    toData: (function () {
        var $164 = ToData.toData(ToData.toDataByteArray);
        return function ($165) {
            return $164(rewardAddressBytes($165));
        };
    })()
};
var rewardAddressBech32 = function ($166) {
    return $foreign.addressBech32($foreign.rewardAddressToAddress($166));
};
var pointerAddressFromAddress = $foreign["_pointerAddressFromAddress"](FfiHelpers.maybeFfiHelper);
var pointerAddressBytes = function ($167) {
    return $foreign.addressBytes($foreign.pointerAddressToAddress($167));
};
var pointerAddressBech32 = function ($168) {
    return $foreign.addressBech32($foreign.pointerAddressToAddress($168));
};
var networkIdtoInt = function (v) {
    if (v instanceof TestnetId) {
        return 0;
    };
    if (v instanceof MainnetId) {
        return 1;
    };
    throw new Error("Failed pattern match at Serialization.Address (line 369, column 18 - line 371, column 17): " + [ v.constructor.name ]);
};
var pointerAddress = $foreign["_pointerAddress"](networkIdtoInt);
var rewardAddress = $foreign["_rewardAddress"](networkIdtoInt);
var intToNetworkId = function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(TestnetId.value);
    };
    if (v === 1) {
        return new Data_Maybe.Just(MainnetId.value);
    };
    return Data_Maybe.Nothing.value;
};
var unsafeIntToNetId = function (i) {
    return Data_Maybe.fromJust()(intToNetworkId(i));
};
var enterpriseAddressFromAddress = $foreign["_enterpriseAddressFromAddress"](FfiHelpers.maybeFfiHelper);
var enterpriseAddressBytes = function ($169) {
    return $foreign.addressBytes($foreign.enterpriseAddressToAddress($169));
};
var enterpriseAddressBech32 = function ($170) {
    return $foreign.addressBech32($foreign.enterpriseAddressToAddress($170));
};
var enterpriseAddress = $foreign["_enterpriseAddress"](networkIdtoInt);
var byronAddressNetworkId = $foreign["_byronAddressNetworkId"](unsafeIntToNetId);
var byronAddressFromBytes = $foreign["_byronAddressFromBytes"](FfiHelpers.maybeFfiHelper);
var fromDataByronAddress = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Bytes) {
            return byronAddressFromBytes(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }
};
var byronAddressFromBase58 = $foreign["_byronAddressFromBase58"](FfiHelpers.maybeFfiHelper);
var byronAddressFromAddress = $foreign["_byronAddressFromAddress"](FfiHelpers.maybeFfiHelper);
var baseAddressFromAddress = $foreign["_baseAddressFromAddress"](FfiHelpers.maybeFfiHelper);
var baseAddressBytes = function ($171) {
    return $foreign.addressBytes($foreign.baseAddressToAddress($171));
};
var baseAddressBech32 = function ($172) {
    return $foreign.addressBech32($foreign.baseAddressToAddress($172));
};
var baseAddress = $foreign["_baseAddress"](networkIdtoInt);
var pubKeyAddress = function (netId) {
    return function (pkh) {
        return function (skh) {
            return baseAddress({
                network: netId,
                paymentCred: $foreign.keyHashCredential(pkh),
                delegationCred: $foreign.keyHashCredential(skh)
            });
        };
    };
};
var scriptAddress = function (netId) {
    return function (skh) {
        return baseAddress({
            network: netId,
            paymentCred: $foreign.scriptHashCredential(skh),
            delegationCred: $foreign.scriptHashCredential(skh)
        });
    };
};
var addressPaymentCred = function (addr) {
    return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.baseAddressPaymentCred)(baseAddressFromAddress(addr)))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.rewardAddressPaymentCred)(rewardAddressFromAddress(addr))))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.pointerAddressPaymentCred)(pointerAddressFromAddress(addr))))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.enterpriseAddressPaymentCred)(enterpriseAddressFromAddress(addr)));
};
var addressNetworkId = $foreign["_addressNetworkId"](unsafeIntToNetId);
var baseAddressNetworkId = function ($173) {
    return addressNetworkId($foreign.baseAddressToAddress($173));
};
var enterpriseAddressNetworkId = function ($174) {
    return addressNetworkId($foreign.enterpriseAddressToAddress($174));
};
var pointerAddressNetworkId = function ($175) {
    return addressNetworkId($foreign.pointerAddressToAddress($175));
};
var rewardAddressNetworkId = function ($176) {
    return addressNetworkId($foreign.rewardAddressToAddress($176));
};
var addressFromBytes = $foreign["_addressFromBytes"](FfiHelpers.maybeFfiHelper);
var baseAddressFromBytes = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(addressFromBytes)(baseAddressFromAddress);
var fromDataBaseAddress = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Bytes) {
            return baseAddressFromBytes(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }
};
var enterpriseAddressFromBytes = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(addressFromBytes)(enterpriseAddressFromAddress);
var fromDataEnterpriseAddress = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Bytes) {
            return enterpriseAddressFromBytes(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }
};
var pointerAddressFromBytes = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(addressFromBytes)(pointerAddressFromAddress);
var fromDataPointerAddress = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Bytes) {
            return pointerAddressFromBytes(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }
};
var rewardAddressFromBytes = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(addressFromBytes)(rewardAddressFromAddress);
var fromDataRewardAddress = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Bytes) {
            return rewardAddressFromBytes(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }
};
var fromDataAddress = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Bytes) {
            return addressFromBytes(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }
};
var addressFromBech32 = $foreign["_addressFromBech32"](FfiHelpers.maybeFfiHelper);
var baseAddressFromBech32 = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(addressFromBech32)(baseAddressFromAddress);
var enterpriseAddressFromBech32 = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(addressFromBech32)(enterpriseAddressFromAddress);
var pointerAddressFromBech32 = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(addressFromBech32)(pointerAddressFromAddress);
var rewardAddressFromBech32 = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(addressFromBech32)(rewardAddressFromAddress);
module.exports = {
    Slot: Slot,
    BlockId: BlockId,
    TransactionIndex: TransactionIndex,
    CertificateIndex: CertificateIndex,
    addressNetworkId: addressNetworkId,
    intToNetworkId: intToNetworkId,
    baseAddress: baseAddress,
    ByronProtocolMagic: ByronProtocolMagic,
    TestnetId: TestnetId,
    MainnetId: MainnetId,
    pubKeyAddress: pubKeyAddress,
    scriptAddress: scriptAddress,
    stakeCredentialToKeyHash: stakeCredentialToKeyHash,
    stakeCredentialToScriptHash: stakeCredentialToScriptHash,
    stakeCredentialFromBytes: stakeCredentialFromBytes,
    addressFromBytes: addressFromBytes,
    addressFromBech32: addressFromBech32,
    addressPaymentCred: addressPaymentCred,
    baseAddressFromAddress: baseAddressFromAddress,
    baseAddressBytes: baseAddressBytes,
    baseAddressBech32: baseAddressBech32,
    baseAddressFromBytes: baseAddressFromBytes,
    baseAddressFromBech32: baseAddressFromBech32,
    baseAddressNetworkId: baseAddressNetworkId,
    byronAddressFromBase58: byronAddressFromBase58,
    byronAddressFromBytes: byronAddressFromBytes,
    byronAddressNetworkId: byronAddressNetworkId,
    byronAddressFromAddress: byronAddressFromAddress,
    enterpriseAddress: enterpriseAddress,
    enterpriseAddressFromAddress: enterpriseAddressFromAddress,
    enterpriseAddressBytes: enterpriseAddressBytes,
    enterpriseAddressBech32: enterpriseAddressBech32,
    enterpriseAddressFromBytes: enterpriseAddressFromBytes,
    enterpriseAddressFromBech32: enterpriseAddressFromBech32,
    enterpriseAddressNetworkId: enterpriseAddressNetworkId,
    networkIdtoInt: networkIdtoInt,
    pointerAddress: pointerAddress,
    pointerAddressFromAddress: pointerAddressFromAddress,
    pointerAddressBytes: pointerAddressBytes,
    pointerAddressBech32: pointerAddressBech32,
    pointerAddressFromBytes: pointerAddressFromBytes,
    pointerAddressFromBech32: pointerAddressFromBech32,
    pointerAddressNetworkId: pointerAddressNetworkId,
    rewardAddress: rewardAddress,
    rewardAddressBytes: rewardAddressBytes,
    rewardAddressBech32: rewardAddressBech32,
    rewardAddressFromBytes: rewardAddressFromBytes,
    rewardAddressFromBech32: rewardAddressFromBech32,
    rewardAddressNetworkId: rewardAddressNetworkId,
    rewardAddressFromAddress: rewardAddressFromAddress,
    newtypeSlot_: newtypeSlot_,
    genericSlot_: genericSlot_,
    eqSlot: eqSlot,
    ordSlot: ordSlot,
    decodeAesonSlot: decodeAesonSlot,
    fromDataSlot: fromDataSlot,
    toDataSlot: toDataSlot,
    showSlot: showSlot,
    semigroupSlot: semigroupSlot,
    monoidSlot: monoidSlot,
    decodeJsonSlot: decodeJsonSlot,
    encodeJsonSlot: encodeJsonSlot,
    eqBlockId: eqBlockId,
    newtypeBlockId_: newtypeBlockId_,
    genericBlockId_: genericBlockId_,
    encodeJsonBlockId: encodeJsonBlockId,
    showBlockId: showBlockId,
    eqTransactionIndex: eqTransactionIndex,
    ordTransactionIndex: ordTransactionIndex,
    newtypeTransactionIndex_: newtypeTransactionIndex_,
    genericTransactionIndex_: genericTransactionIndex_,
    toDataTransactionIndex: toDataTransactionIndex,
    fromDataTransactionIndex: fromDataTransactionIndex,
    showTransactionIndex: showTransactionIndex,
    eqCertificateIndex: eqCertificateIndex,
    ordCertificateIndex: ordCertificateIndex,
    newtypeCertificateIndex_: newtypeCertificateIndex_,
    genericCertificateIndex_: genericCertificateIndex_,
    toDataCertificateIndex: toDataCertificateIndex,
    fromDataCertificateIndex: fromDataCertificateIndex,
    showCertificateIndex: showCertificateIndex,
    showAddress: showAddress,
    eqAddress: eqAddress,
    ordAddress: ordAddress,
    fromDataAddress: fromDataAddress,
    toDataAddress: toDataAddress,
    showBaseAddress: showBaseAddress,
    eqBaseAddress: eqBaseAddress,
    fromDataBaseAddress: fromDataBaseAddress,
    toDataBaseAddress: toDataBaseAddress,
    eqByronAddress: eqByronAddress,
    showByronAddress: showByronAddress,
    fromDataByronAddress: fromDataByronAddress,
    toDataByronAddress: toDataByronAddress,
    eqEnterpriseAddress: eqEnterpriseAddress,
    showEnterpriseAddress: showEnterpriseAddress,
    fromDataEnterpriseAddress: fromDataEnterpriseAddress,
    toDataEnterpriseAddress: toDataEnterpriseAddress,
    eqPointerAddress: eqPointerAddress,
    showPointerAddress: showPointerAddress,
    fromDataPointerAddress: fromDataPointerAddress,
    toDataPointerAddress: toDataPointerAddress,
    eqRewardAddress: eqRewardAddress,
    showRewardAddress: showRewardAddress,
    ordRewardAddress: ordRewardAddress,
    fromDataRewardAddress: fromDataRewardAddress,
    toDataRewardAddress: toDataRewardAddress,
    eqStakeCredential: eqStakeCredential,
    ordStakeCredential: ordStakeCredential,
    showStakeCredential: showStakeCredential,
    fromDataStakeCredential: fromDataStakeCredential,
    toDataStakeCredential: toDataStakeCredential,
    eqNetworkId: eqNetworkId,
    genericNetworkId_: genericNetworkId_,
    showNetworkId: showNetworkId,
    addressBytes: $foreign.addressBytes,
    addressBech32: $foreign.addressBech32,
    keyHashCredential: $foreign.keyHashCredential,
    scriptHashCredential: $foreign.scriptHashCredential,
    withStakeCredential: $foreign.withStakeCredential,
    stakeCredentialToBytes: $foreign.stakeCredentialToBytes,
    baseAddressPaymentCred: $foreign.baseAddressPaymentCred,
    baseAddressDelegationCred: $foreign.baseAddressDelegationCred,
    baseAddressToAddress: $foreign.baseAddressToAddress,
    byronAddressToBase58: $foreign.byronAddressToBase58,
    byronAddressBytes: $foreign.byronAddressBytes,
    byronProtocolMagic: $foreign.byronProtocolMagic,
    byronAddressAttributes: $foreign.byronAddressAttributes,
    byronAddressToAddress: $foreign.byronAddressToAddress,
    byronAddressIsValid: $foreign.byronAddressIsValid,
    icarusFromKey: $foreign.icarusFromKey,
    enterpriseAddressPaymentCred: $foreign.enterpriseAddressPaymentCred,
    enterpriseAddressToAddress: $foreign.enterpriseAddressToAddress,
    pointerAddressPaymentCred: $foreign.pointerAddressPaymentCred,
    pointerAddressToAddress: $foreign.pointerAddressToAddress,
    pointerAddressStakePointer: $foreign.pointerAddressStakePointer,
    rewardAddressPaymentCred: $foreign.rewardAddressPaymentCred,
    rewardAddressToAddress: $foreign.rewardAddressToAddress
};
