// Generated by purs version 0.14.5
"use strict";
var BalanceTx = require("../BalanceTx/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Getter = require("../Data.Lens.Getter/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var QueryM = require("../QueryM/index.js");
var QueryM_Ogmios = require("../QueryM.Ogmios/index.js");
var ReindexRedeemers = require("../ReindexRedeemers/index.js");
var TxOutput = require("../TxOutput/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_ScriptLookups = require("../Types.ScriptLookups/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_UnbalancedTransaction = require("../Types.UnbalancedTransaction/index.js");
var BalancedSignedTransaction = function (x) {
    return x;
};
var newtypeBalancedSignedTran = {
    Coercible0: function () {
        return undefined;
    }
};
var genericBalancedSignedTran = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showBalancedSignedTransac = {
    show: Data_Show_Generic.genericShow(genericBalancedSignedTran)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "signedTxCbor";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "transaction";
        }
    })(Data_Show.showRecordFieldsNil)(Types_Transaction.showTransaction))(Types_ByteArray.showByteArray))))({
        reflectSymbol: function () {
            return "BalancedSignedTransaction";
        }
    }))
};
var eqBalancedSignedTransacti = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "transaction";
    }
})(Types_Transaction.eqTransaction))()({
    reflectSymbol: function () {
        return "signedTxCbor";
    }
})(Types_ByteArray.eqByteArray));
var submit = function ($15) {
    return Contract_Monad.wrapContract(QueryM.submitTxOgmios($15));
};
var signTransactionBytes = function ($16) {
    return Contract_Monad.wrapContract(QueryM.signTransactionBytes($16));
};
var signTransaction = function ($17) {
    return Contract_Monad.wrapContract(QueryM.signTransaction($17));
};
var reindexSpentScriptRedeemers = function (balancedTx) {
    var $18 = ReindexRedeemers.reindexSpentScriptRedeemers(balancedTx);
    return function ($19) {
        return Contract_Monad.wrapContract($18($19));
    };
};
var finalizeTx = function (tx) {
    return function (datums) {
        return function (redeemers) {
            return Contract_Monad.wrapContract(QueryM.finalizeTx(tx)(datums)(redeemers));
        };
    };
};
var calculateMinFee = function ($20) {
    return Contract_Monad.wrapContract(QueryM.calculateMinFee($20));
};
var calculateMinFeeM = (function () {
    var $21 = Data_Functor.map(Contract_Monad.functorContract)(Data_Either.hush);
    return function ($22) {
        return $21(calculateMinFee($22));
    };
})();
var balanceTx = function ($23) {
    return Contract_Monad.wrapContract(BalanceTx.balanceTx($23));
};
var balanceTxM = (function () {
    var $24 = Data_Functor.map(Contract_Monad.functorContract)(Data_Either.hush);
    return function ($25) {
        return $24(balanceTx($25));
    };
})();
var balanceAndSignTx = function (v) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"](BalanceTx.showBalanceTxError)(balanceTx(v.unbalancedTx)))(function (balancedTx) {
        var inputs = Data_Lens_Getter.viewOn(balancedTx)((function () {
            var $26 = Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget);
            var $27 = Types_Transaction["_inputs"](Data_Lens_Internal_Forget.strongForget);
            return function ($28) {
                return $26($27($28));
            };
        })());
        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"](ReindexRedeemers.showReindexErrors)(reindexSpentScriptRedeemers(inputs)(v.redeemersTxIns)))(function (redeemers) {
            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("balanceAndSignTx: Cannot attach datums and redeemer")(finalizeTx(balancedTx)(v.datums)(redeemers)))(function (v1) {
                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("balanceAndSignTx: Failed to sign transaction")(signTransactionBytes(v1)))(function (signedTxCbor) {
                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                        transaction: balancedTx,
                        signedTxCbor: signedTxCbor
                    }));
                });
            });
        });
    });
};
module.exports = {
    BalancedSignedTransaction: BalancedSignedTransaction,
    balanceAndSignTx: balanceAndSignTx,
    balanceTx: balanceTx,
    balanceTxM: balanceTxM,
    calculateMinFee: calculateMinFee,
    calculateMinFeeM: calculateMinFeeM,
    finalizeTx: finalizeTx,
    reindexSpentScriptRedeemers: reindexSpentScriptRedeemers,
    signTransaction: signTransaction,
    signTransactionBytes: signTransactionBytes,
    submit: submit,
    genericBalancedSignedTran: genericBalancedSignedTran,
    newtypeBalancedSignedTran: newtypeBalancedSignedTran,
    eqBalancedSignedTransacti: eqBalancedSignedTransacti,
    showBalancedSignedTransac: showBalancedSignedTransac,
    ClientDecodeJsonError: QueryM.ClientDecodeJsonError,
    ClientEncodingError: QueryM.ClientEncodingError,
    ClientHttpError: QueryM.ClientHttpError,
    ClientOtherError: QueryM.ClientOtherError,
    FeeEstimate: QueryM.FeeEstimate,
    FinalizedTransaction: QueryM.FinalizedTransaction,
    CannotGetTxOutRefIndexForRedeemer: ReindexRedeemers.CannotGetTxOutRefIndexForRedeemer,
    ogmiosTxOutToScriptOutput: TxOutput.ogmiosTxOutToScriptOutput,
    ogmiosTxOutToTransactionOutput: TxOutput.ogmiosTxOutToTransactionOutput,
    scriptOutputToOgmiosTxOut: TxOutput.scriptOutputToOgmiosTxOut,
    scriptOutputToTransactionOutput: TxOutput.scriptOutputToTransactionOutput,
    transactionInputToTxOutRef: TxOutput.transactionInputToTxOutRef,
    transactionOutputToOgmiosTxOut: TxOutput.transactionOutputToOgmiosTxOut,
    transactionOutputToScriptOutput: TxOutput.transactionOutputToScriptOutput,
    txOutRefToTransactionInput: TxOutput.txOutRefToTransactionInput,
    CannotConvertPOSIXTimeRange: Types_ScriptLookups.CannotConvertPOSIXTimeRange,
    CannotConvertPaymentPubKeyHash: Types_ScriptLookups.CannotConvertPaymentPubKeyHash,
    CannotGetMintingPolicyScriptIndex: Types_ScriptLookups.CannotGetMintingPolicyScriptIndex,
    CannotGetValidatorHashFromAddress: Types_ScriptLookups.CannotGetValidatorHashFromAddress,
    CannotHashDatum: Types_ScriptLookups.CannotHashDatum,
    CannotHashMintingPolicy: Types_ScriptLookups.CannotHashMintingPolicy,
    CannotHashValidator: Types_ScriptLookups.CannotHashValidator,
    CannotMakeValue: Types_ScriptLookups.CannotMakeValue,
    CannotQueryDatum: Types_ScriptLookups.CannotQueryDatum,
    CannotSatisfyAny: Types_ScriptLookups.CannotSatisfyAny,
    DatumNotFound: Types_ScriptLookups.DatumNotFound,
    DatumWrongHash: Types_ScriptLookups.DatumWrongHash,
    MintingPolicyHashNotCurrencySymbol: Types_ScriptLookups.MintingPolicyHashNotCurrencySymbol,
    MintingPolicyNotFound: Types_ScriptLookups.MintingPolicyNotFound,
    MkTypedTxOutFailed: Types_ScriptLookups.MkTypedTxOutFailed,
    ModifyTx: Types_ScriptLookups.ModifyTx,
    OwnPubKeyAndStakeKeyMissing: Types_ScriptLookups.OwnPubKeyAndStakeKeyMissing,
    TxOutRefNotFound: Types_ScriptLookups.TxOutRefNotFound,
    TxOutRefWrongType: Types_ScriptLookups.TxOutRefWrongType,
    TypeCheckFailed: Types_ScriptLookups.TypeCheckFailed,
    TypedTxOutHasNoDatumHash: Types_ScriptLookups.TypedTxOutHasNoDatumHash,
    TypedValidatorMissing: Types_ScriptLookups.TypedValidatorMissing,
    ValidatorHashNotFound: Types_ScriptLookups.ValidatorHashNotFound,
    mkUnbalancedTx: Types_ScriptLookups.mkUnbalancedTx,
    AuxiliaryData: Types_Transaction.AuxiliaryData,
    AuxiliaryDataHash: Types_Transaction.AuxiliaryDataHash,
    GenesisKeyDelegation: Types_Transaction.GenesisKeyDelegation,
    MoveInstantaneousRewardsCert: Types_Transaction.MoveInstantaneousRewardsCert,
    PoolRegistration: Types_Transaction.PoolRegistration,
    PoolRetirement: Types_Transaction.PoolRetirement,
    StakeDelegation: Types_Transaction.StakeDelegation,
    StakeDeregistration: Types_Transaction.StakeDeregistration,
    StakeRegistration: Types_Transaction.StakeRegistration,
    CostModel: Types_Transaction.CostModel,
    Costmdls: Types_Transaction.Costmdls,
    DataHash: Types_Transaction.DataHash,
    Ed25519Signature: Types_Transaction.Ed25519Signature,
    Epoch: Types_Transaction.Epoch,
    GeneralTransactionMetadata: Types_Transaction.GeneralTransactionMetadata,
    GenesisHash: Types_Transaction.GenesisHash,
    PlutusV1: Types_Transaction.PlutusV1,
    Mint: Types_Transaction.Mint,
    ScriptAll: Types_Transaction.ScriptAll,
    ScriptAny: Types_Transaction.ScriptAny,
    ScriptNOfK: Types_Transaction.ScriptNOfK,
    ScriptPubkey: Types_Transaction.ScriptPubkey,
    TimelockExpiry: Types_Transaction.TimelockExpiry,
    TimelockStart: Types_Transaction.TimelockStart,
    Nonce: Types_Transaction.Nonce,
    ProposedProtocolParameterUpdates: Types_Transaction.ProposedProtocolParameterUpdates,
    PublicKey: Types_Transaction.PublicKey,
    RequiredSigner: Types_Transaction.RequiredSigner,
    ScriptDataHash: Types_Transaction.ScriptDataHash,
    Transaction: Types_Transaction.Transaction,
    TransactionHash: Types_Transaction.TransactionHash,
    TransactionInput: Types_Transaction.TransactionInput,
    Bytes: Types_Transaction.Bytes,
    Int: Types_Transaction.Int,
    MetadataList: Types_Transaction.MetadataList,
    MetadataMap: Types_Transaction.MetadataMap,
    Text: Types_Transaction.Text,
    TransactionMetadatumLabel: Types_Transaction.TransactionMetadatumLabel,
    TransactionOutput: Types_Transaction.TransactionOutput,
    TransactionWitnessSet: Types_Transaction.TransactionWitnessSet,
    TxBody: Types_Transaction.TxBody,
    UtxoM: Types_Transaction.UtxoM,
    Vkey: Types_Transaction.Vkey,
    Vkeywitness: Types_Transaction.Vkeywitness,
    "_auxiliaryData": Types_Transaction["_auxiliaryData"],
    "_auxiliaryDataHash": Types_Transaction["_auxiliaryDataHash"],
    "_body": Types_Transaction["_body"],
    "_bootstraps": Types_Transaction["_bootstraps"],
    "_certs": Types_Transaction["_certs"],
    "_collateral": Types_Transaction["_collateral"],
    "_fee": Types_Transaction["_fee"],
    "_inputs": Types_Transaction["_inputs"],
    "_isValid": Types_Transaction["_isValid"],
    "_mint": Types_Transaction["_mint"],
    "_nativeScripts": Types_Transaction["_nativeScripts"],
    "_networkId": Types_Transaction["_networkId"],
    "_outputs": Types_Transaction["_outputs"],
    "_plutusData": Types_Transaction["_plutusData"],
    "_plutusScripts": Types_Transaction["_plutusScripts"],
    "_requiredSigners": Types_Transaction["_requiredSigners"],
    "_scriptDataHash": Types_Transaction["_scriptDataHash"],
    "_ttl": Types_Transaction["_ttl"],
    "_update": Types_Transaction["_update"],
    "_validityStartInterval": Types_Transaction["_validityStartInterval"],
    "_vkeys": Types_Transaction["_vkeys"],
    "_withdrawals": Types_Transaction["_withdrawals"],
    "_witnessSet": Types_Transaction["_witnessSet"],
    ScriptOutput: Types_UnbalancedTransaction.ScriptOutput,
    UnbalancedTx: Types_UnbalancedTransaction.UnbalancedTx,
    "_transaction": Types_UnbalancedTransaction["_transaction"],
    "_utxoIndex": Types_UnbalancedTransaction["_utxoIndex"],
    emptyUnbalancedTx: Types_UnbalancedTransaction.emptyUnbalancedTx
};
