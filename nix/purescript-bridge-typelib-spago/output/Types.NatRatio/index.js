// Generated by purs version 0.14.5
"use strict";
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ratio = require("../Data.Ratio/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Types_Natural = require("../Types.Natural/index.js");
var NatRatio = function (x) {
    return x;
};
var showNatRatio = {
    show: function (v) {
        return "(NatRatio " + (Data_Show.show(Data_Ratio.showRatio(Data_BigInt.showBigInt))(v) + ")");
    }
};
var semiringNatRatio = Data_Ratio.semiringRatio(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt);
var ordNatRatio = Data_Ratio.ordRatio(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt);
var eqNatRatio = Data_Ratio.eqRatio(Data_BigInt.eqBigInt);
var toRational = function (v) {
    return v;
};
var numeratorAsNat = function (v) {
    return Types_Natural["fromBigInt'"](Data_Ratio.numerator(v));
};
var numerator = function (v) {
    return Data_Ratio.numerator(v);
};
var fromNaturals = function (n) {
    return function (d) {
        var $14 = Data_Eq.notEq(Types_Natural.eqNatural)(d)(Data_Semiring.zero(Types_Natural.semiringNatural));
        if ($14) {
            return Data_Maybe.Just.create(NatRatio(Data_Ratio.reduce(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt)(Types_Natural.toBigInt(n))(Types_Natural.toBigInt(d))));
        };
        return Data_Maybe.Nothing.value;
    };
};
var fromBigInts = function (n) {
    return function (d) {
        if (Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(n)(Data_Semiring.zero(Data_BigInt.semiringBigInt)) && Data_Ord.greaterThan(Data_BigInt.ordBigInt)(d)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
            return Data_Maybe.Just.create(NatRatio(Data_Ratio.reduce(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt)(n)(d)));
        };
        if (Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(n)(Data_Semiring.zero(Data_BigInt.semiringBigInt)) && Data_Ord.lessThan(Data_BigInt.ordBigInt)(d)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
            return Data_Maybe.Just.create(NatRatio(Data_Ratio.reduce(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt)(Data_Ring.negate(Data_BigInt.ringBigInt)(n))(Data_Ring.negate(Data_BigInt.ringBigInt)(d))));
        };
        if (Data_Boolean.otherwise) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Types.NatRatio (line 58, column 1 - line 58, column 50): " + [ n.constructor.name, d.constructor.name ]);
    };
};
var fromRational = function (r) {
    var num = Data_Ratio.numerator(r);
    var den = Data_Ratio.denominator(r);
    return fromBigInts(num)(den);
};
var denominatorAsNat = function (v) {
    return Types_Natural["fromBigInt'"](Data_Ratio.denominator(v));
};
var denominator = function (v) {
    return Data_Ratio.denominator(v);
};
module.exports = {
    denominator: denominator,
    denominatorAsNat: denominatorAsNat,
    fromBigInts: fromBigInts,
    fromNaturals: fromNaturals,
    fromRational: fromRational,
    numerator: numerator,
    numeratorAsNat: numeratorAsNat,
    toRational: toRational,
    eqNatRatio: eqNatRatio,
    ordNatRatio: ordNatRatio,
    semiringNatRatio: semiringNatRatio,
    showNatRatio: showNatRatio
};
