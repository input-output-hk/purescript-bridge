// Generated by purs version 0.14.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Deserialization_WitnessSet = require("../Deserialization.WitnessSet/index.js");
var Effect = require("../Effect/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Helpers = require("../Helpers/index.js");
var ProtocolParametersAlonzo = require("../ProtocolParametersAlonzo/index.js");
var Serialization = require("../Serialization/index.js");
var Serialization_PlutusData = require("../Serialization.PlutusData/index.js");
var Serialization_WitnessSet = require("../Serialization.WitnessSet/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Untagged_Union = require("../Untagged.Union/index.js");
var ConvertWitnessesError = (function () {
    function ConvertWitnessesError() {

    };
    ConvertWitnessesError.value = new ConvertWitnessesError();
    return ConvertWitnessesError;
})();
var ConvertDatumError = (function () {
    function ConvertDatumError() {

    };
    ConvertDatumError.value = new ConvertDatumError();
    return ConvertDatumError;
})();
var genericModifyTxError_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return ConvertWitnessesError.value;
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return ConvertDatumError.value;
        };
        throw new Error("Failed pattern match at Transaction (line 41, column 1 - line 41, column 40): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof ConvertWitnessesError) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof ConvertDatumError) {
            return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
        };
        throw new Error("Failed pattern match at Transaction (line 41, column 1 - line 41, column 40): " + [ x.constructor.name ]);
    }
};
var showModifyTxError = {
    show: Data_Show_Generic.genericShow(genericModifyTxError_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "ConvertWitnessesError";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "ConvertDatumError";
        }
    })))
};
var eqModifyTxError = {
    eq: function (x) {
        return function (y) {
            if (x instanceof ConvertWitnessesError && y instanceof ConvertWitnessesError) {
                return true;
            };
            if (x instanceof ConvertDatumError && y instanceof ConvertDatumError) {
                return true;
            };
            return false;
        };
    }
};
var updateTxWithWitnesses = function (v) {
    return function (ws) {
        return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Data_Either.Right.create(Data_Newtype.over()()(Types_Transaction.Transaction)(function (v1) {
            return {
                witnessSet: Data_Semigroup.append(Types_Transaction.semigroupTransactionWitne)(v.witnessSet)(ws),
                auxiliaryData: v1.auxiliaryData,
                body: v1.body,
                isValid: v1.isValid
            };
        })(v)));
    };
};
var setScriptDataHash = function (rs) {
    return function (ds) {
        return function (v) {
            return function __do() {
                var scriptDataHash = Data_Functor.map(Effect.functorEffect)((function () {
                    var $36 = Untagged_Union.asOneOf();
                    return function ($37) {
                        return Types_Transaction.ScriptDataHash(Serialization.toBytes($36($37)));
                    };
                })())(Serialization.hashScriptData(rs)(ProtocolParametersAlonzo.costModels)(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap())(ds)))();
                return Data_Newtype.over()()(Types_Transaction.Transaction)(function (v1) {
                    return {
                        body: Data_Newtype.over()()(Types_Transaction.TxBody)(function (v2) {
                            return {
                                scriptDataHash: new Data_Maybe.Just(scriptDataHash),
                                auxiliaryDataHash: v2.auxiliaryDataHash,
                                certs: v2.certs,
                                collateral: v2.collateral,
                                fee: v2.fee,
                                inputs: v2.inputs,
                                mint: v2.mint,
                                networkId: v2.networkId,
                                outputs: v2.outputs,
                                requiredSigners: v2.requiredSigners,
                                ttl: v2.ttl,
                                update: v2.update,
                                validityStartInterval: v2.validityStartInterval,
                                withdrawals: v2.withdrawals
                            };
                        })(v.body),
                        auxiliaryData: v1.auxiliaryData,
                        isValid: v1.isValid,
                        witnessSet: v1.witnessSet
                    };
                })(v);
            };
        };
    };
};
var convertWitnessesWith = function (ws) {
    return function (act) {
        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(Serialization_WitnessSet.convertWitnessSet(ws)))(function (ws$prime) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(act(ws$prime)))(function () {
                return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Data_Either.note(ConvertWitnessesError.value)(Deserialization_WitnessSet.convertWitnessSet(ws$prime)));
            });
        });
    };
};
var attachRedeemer = function (r) {
    return function (v) {
        return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(Serialization_WitnessSet.convertRedeemer(r)))(function (r$prime) {
            return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(updateTxWithWitnesses(v))(convertWitnessesWith(v.witnessSet)(Serialization_WitnessSet.setRedeemer(r$prime)));
        }));
    };
};
var attachPlutusScript = function (ps) {
    return function (v) {
        return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(Serialization_WitnessSet.convertPlutusScript(ps)))(function (ps$prime) {
            return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(updateTxWithWitnesses(v))(convertWitnessesWith(v.witnessSet)(Serialization_WitnessSet.setPlutusScript(ps$prime)));
        }));
    };
};
var attachDatum = function (v) {
    return function (v1) {
        return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Data_Either.note(ConvertDatumError.value)(Serialization_PlutusData.convertPlutusData(v))))(function (pd$prime) {
            return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(updateTxWithWitnesses(v1))(convertWitnessesWith(v1.witnessSet)(Serialization_WitnessSet.setPlutusData(pd$prime)));
        }));
    };
};
module.exports = {
    ConvertWitnessesError: ConvertWitnessesError,
    ConvertDatumError: ConvertDatumError,
    attachDatum: attachDatum,
    attachRedeemer: attachRedeemer,
    attachPlutusScript: attachPlutusScript,
    setScriptDataHash: setScriptDataHash,
    genericModifyTxError_: genericModifyTxError_,
    eqModifyTxError: eqModifyTxError,
    showModifyTxError: showModifyTxError
};
