// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_UInt = require("../Data.UInt/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Deserialization_FromBytes = require("../Deserialization.FromBytes/index.js");
var Effect = require("../Effect/index.js");
var FfiHelpers = require("../FfiHelpers/index.js");
var Helpers = require("../Helpers/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Serialization_BigInt = require("../Serialization.BigInt/index.js");
var Serialization_BigNum = require("../Serialization.BigNum/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var Serialization_PlutusData = require("../Serialization.PlutusData/index.js");
var Serialization_WitnessSet = require("../Serialization.WitnessSet/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_Value = require("../Types.Value/index.js");
var Untagged_Union = require("../Untagged.Union/index.js");
var publicKeyFromBech32 = $foreign["_publicKeyFromBech32"](FfiHelpers.maybeFfiHelper);
var convertWithdrawals = function (mp) {
    return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newWithdrawals(FfiHelpers.containerHelper))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(mp))(function (v) {
        return Data_Functor.map(Effect.functorEffect)(Data_Tuple.Tuple.create(v.value0))(Helpers.fromJustEff("convertWithdrawals: Failed to convert BigNum")(Serialization_BigNum.bigNumFromBigInt(v.value1)));
    }));
};
var convertValue = function (val) {
    var m = Types_Value["getNonAdaAsset'"](val);
    var lovelace = Types_Value["valueToCoin'"](val);
    return function __do() {
        var multiasset = $foreign.newMultiAsset();
        Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(m)(function (scriptHashBytes$prime) {
            return function (values) {
                var mScripthash = Serialization_Hash.scriptHashFromBytes(Types_Value.getCurrencySymbol(scriptHashBytes$prime));
                return function __do() {
                    var scripthash = Helpers.fromJustEff("scriptHashFromBytes failed while converting value")(mScripthash)();
                    var assets = $foreign.newAssets();
                    Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(values)(function (tokenName$prime) {
                        return function (bigIntValue) {
                            var tokenName = Types_Value.getTokenName(tokenName$prime);
                            return function __do() {
                                var assetName = $foreign.newAssetName(tokenName)();
                                var value = Helpers.fromJustEff("convertValue: number must not be negative")($foreign.newBigNum(FfiHelpers.maybeFfiHelper)(Data_BigInt.toString(bigIntValue)))();
                                return $foreign.insertAssets(assets)(assetName)(value)();
                            };
                        };
                    })();
                    return $foreign.insertMultiAsset(multiasset)(scripthash)(assets)();
                };
            };
        })();
        var value = $foreign.newValueFromAssets(multiasset)();
        Control_Bind.bindFlipped(Effect.bindEffect)($foreign.valueSetCoin(value))(Helpers.fromJustEff("convertValue: coin value must not be negative")($foreign.newBigNum(FfiHelpers.maybeFfiHelper)(Data_BigInt.toString(lovelace))))();
        return value;
    };
};
var convertTxOutput = function (v) {
    return function __do() {
        var value = convertValue(v.amount)();
        var txo = $foreign.newTransactionOutput(v.address)(value)();
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.unwrap())(v.dataHash))(function (bytes) {
            return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Deserialization_FromBytes.fromBytes(Deserialization_FromBytes.fromBytesDataHash)(bytes))($foreign.transactionOutputSetDataHash(txo));
        })();
        return txo;
    };
};
var convertTxOutputs = function (arrOutputs) {
    return function __do() {
        var outputs = $foreign.newTransactionOutputs();
        Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Control_Bind.composeKleisli(Effect.bindEffect)(convertTxOutput)($foreign.addTransactionOutput(outputs)))(arrOutputs)();
        return outputs;
    };
};
var convertTxInput = function (v) {
    return function __do() {
        var tx_hash = Deserialization_FromBytes.fromBytesEffect(Deserialization_FromBytes.fromBytesTransactionHash)(Data_Newtype.unwrap()(v.transactionId))();
        return $foreign.newTransactionInput(tx_hash)(v.index)();
    };
};
var convertTxInputs = function (arrInputs) {
    return function __do() {
        var inputs = $foreign.newTransactionInputs();
        Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Control_Bind.composeKleisli(Effect.bindEffect)(convertTxInput)($foreign.addTransactionInput(inputs)))(arrInputs)();
        return inputs;
    };
};
var convertRelays = function (relays) {
    return Data_Functor.map(Effect.functorEffect)($foreign.packRelays(FfiHelpers.containerHelper))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(relays)(function (relay) {
        if (relay instanceof Types_Transaction.SingleHostAddr) {
            return function __do() {
                var ipv4$prime = Data_Functor.map(Effect.functorEffect)(Untagged_Union.maybeToUor)(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.unwrap())(relay.value0.ipv4))($foreign.newIpv4))();
                var ipv6$prime = Data_Functor.map(Effect.functorEffect)(Untagged_Union.maybeToUor)(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.unwrap())(relay.value0.ipv6))($foreign.newIpv6))();
                return $foreign.newSingleHostAddr(Untagged_Union.maybeToUor(relay.value0.port))(ipv4$prime)(ipv6$prime)();
            };
        };
        if (relay instanceof Types_Transaction.SingleHostName) {
            return $foreign.newSingleHostName(Untagged_Union.maybeToUor(relay.value0.port))(relay.value0.dnsName);
        };
        if (relay instanceof Types_Transaction.MultiHostName) {
            return $foreign.newMultiHostName(relay.value0.dnsName);
        };
        throw new Error("Failed pattern match at Serialization (line 425, column 55 - line 433, column 31): " + [ relay.constructor.name ]);
    }));
};
var convertPoolMetadata = function (v) {
    return $foreign.newPoolMetadata(v.url)(v.hash);
};
var convertNetworkId = function (v) {
    if (v instanceof Serialization_Address.TestnetId) {
        return $foreign.networkIdTestnet;
    };
    if (v instanceof Serialization_Address.MainnetId) {
        return $foreign.networkIdMainnet;
    };
    throw new Error("Failed pattern match at Serialization (line 436, column 20 - line 438, column 34): " + [ v.constructor.name ]);
};
var convertMint = function (v) {
    return function __do() {
        var mint = $foreign.newMint();
        Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(v)(function (scriptHashBytes$prime) {
            return function (values) {
                var mScripthash = Serialization_Hash.scriptHashFromBytes(Types_Value.getCurrencySymbol(scriptHashBytes$prime));
                return function __do() {
                    var scripthash = Helpers.fromJustEff("scriptHashFromBytes failed while converting value")(mScripthash)();
                    var assets = $foreign.newMintAssets();
                    Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(values)(function (tokenName$prime) {
                        return function (bigIntValue) {
                            var tokenName = Types_Value.getTokenName(tokenName$prime);
                            return function __do() {
                                var assetName = $foreign.newAssetName(tokenName)();
                                var bigInt = Helpers.fromJustEff("convertMint: failed to convert BigInt")(Serialization_BigInt.convertBigInt(bigIntValue))();
                                var $$int = Helpers.fromJustEff("converMint: numeric overflow or underflow")($foreign["_bigIntToInt"](FfiHelpers.maybeFfiHelper)(bigInt))();
                                return $foreign.insertMintAsset(assets)(assetName)($$int)();
                            };
                        };
                    })();
                    return $foreign.insertMintAssets(mint)(scripthash)(assets)();
                };
            };
        })();
        return mint;
    };
};
var convertMIRToStakeCredentials = function (v) {
    return $foreign.newMIRToStakeCredentials(FfiHelpers.containerHelper)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v));
};
var convertMoveInstantaneousReward = function (v) {
    if (v instanceof Types_Transaction.ToOtherPot) {
        return $foreign.newMoveInstantaneousRewardToOtherPot(v.value0.pot)(v.value0.amount);
    };
    if (v instanceof Types_Transaction.ToStakeCreds) {
        return Control_Bind.bind(Effect.bindEffect)(convertMIRToStakeCredentials(v.value0.amounts))($foreign.newMoveInstantaneousRewardToStakeCreds(v.value0.pot));
    };
    throw new Error("Failed pattern match at Serialization (line 410, column 1 - line 411, column 65): " + [ v.constructor.name ]);
};
var convertCostmdls = function (v) {
    return function __do() {
        var costs = Data_Functor.map(Effect.functorEffect)(Data_Newtype.unwrap())(Helpers.fromJustEff("`PlutusV1` not found in `Costmdls`")(Data_Map_Internal.lookup(Types_Transaction.ordLanguage)(Types_Transaction.PlutusV1.value)(v)))();
        var costModel = $foreign.newCostModel();
        Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_FoldableWithIndex.foldableWithIndexArray)(costs)(function (operation) {
            return function (cost) {
                return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.costModelSetCost(costModel)(operation))($foreign.newInt32(Data_UInt.toInt(cost)));
            };
        })();
        var costmdls = $foreign.newCostmdls();
        var plutusV1 = $foreign.newPlutusV1();
        $foreign.costmdlsSetCostModel(costmdls)(plutusV1)(costModel)();
        return costmdls;
    };
};
var hashScriptData = function (rs) {
    return function (cms) {
        return function (ps) {
            return function __do() {
                var plist = Helpers.fromJustEff("failed to convert datums")(Serialization_PlutusData.packPlutusList(ps))();
                var rs$prime = $foreign.newRedeemers();
                var cms$prime = convertCostmdls(cms)();
                Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)($foreign.addRedeemer(rs$prime))(Serialization_WitnessSet.convertRedeemer))(rs)();
                return $foreign["_hashScriptData"](rs$prime)(cms$prime)(plist)();
            };
        };
    };
};
var convertCert = function (v) {
    if (v instanceof Types_Transaction.StakeRegistration) {
        return $foreign.newStakeRegistrationCertificate(v.value0);
    };
    if (v instanceof Types_Transaction.StakeDeregistration) {
        return $foreign.newStakeDeregistrationCertificate(v.value0);
    };
    if (v instanceof Types_Transaction.StakeDelegation) {
        return $foreign.newStakeDelegationCertificate(v.value0)(v.value1);
    };
    if (v instanceof Types_Transaction.PoolRegistration) {
        return function __do() {
            var margin$prime = $foreign.newUnitInterval(v.value0.margin.numerator)(v.value0.margin.denominator)();
            var poolOwners$prime = $foreign.convertPoolOwners(FfiHelpers.containerHelper)(v.value0.poolOwners)();
            var relays$prime = convertRelays(v.value0.relays)();
            var poolMetadata$prime = Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(v.value0.poolMetadata)(convertPoolMetadata)();
            return $foreign.newPoolRegistrationCertificate(v.value0.operator)(v.value0.vrfKeyhash)(v.value0.pledge)(v.value0.cost)(margin$prime)(v.value0.reward_account)(poolOwners$prime)(relays$prime)(Untagged_Union.maybeToUor(poolMetadata$prime))();
        };
    };
    if (v instanceof Types_Transaction.PoolRetirement) {
        return $foreign.newPoolRetirementCertificate(v.value0.poolKeyhash)(Data_UInt.toInt(Data_Newtype.unwrap()(v.value0.epoch)));
    };
    if (v instanceof Types_Transaction.GenesisKeyDelegation) {
        return Control_Bind.join(Effect.bindEffect)(Control_Apply.apply(Effect.applyEffect)(Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)($foreign.newGenesisKeyDelegationCertificate)($foreign.newGenesisHash(v.value0.genesisHash)))($foreign.newGenesisDelegateHash(v.value0.genesisDelegateHash)))(Control_Applicative.pure(Effect.applicativeEffect)(v.value0.vrfKeyhash)));
    };
    if (v instanceof Types_Transaction.MoveInstantaneousRewardsCert) {
        return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newMoveInstantaneousRewardsCertificate)(convertMoveInstantaneousReward(v.value0));
    };
    throw new Error("Failed pattern match at Serialization (line 362, column 15 - line 403, column 41): " + [ v.constructor.name ]);
};
var convertCerts = function (certs) {
    return function __do() {
        var certificates = $foreign.newCertificates();
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(certs)(Control_Bind.composeKleisli(Effect.bindEffect)(convertCert)($foreign.addCert(certificates)))();
        return certificates;
    };
};
var convertTransaction = function (v) {
    return function __do() {
        var inputs = convertTxInputs(v.body.inputs)();
        var outputs = convertTxOutputs(v.body.outputs)();
        var fee = Helpers.fromJustEff("Failed to convert fee")(Serialization_BigNum.bigNumFromBigInt(Data_Newtype.unwrap()(v.body.fee)))();
        var ttl = Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.body.ttl)((function () {
            var $71 = Data_Newtype.unwrap();
            return function ($72) {
                return Data_UInt.toInt($71($72));
            };
        })());
        var txBody = $foreign.newTransactionBody(inputs)(outputs)(fee)(Untagged_Union.maybeToUor(ttl))();
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.body.validityStartInterval)((function () {
            var $73 = $foreign.transactionBodySetValidityStartInterval(txBody);
            var $74 = Data_Newtype.unwrap();
            return function ($75) {
                return $73(Data_UInt.toInt($74($75)));
            };
        })())();
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.body.requiredSigners)((function () {
            var $76 = $foreign.transactionBodySetRequiredSigners(FfiHelpers.containerHelper)(txBody);
            var $77 = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap());
            return function ($78) {
                return $76($77($78));
            };
        })())();
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.body.auxiliaryDataHash)((function () {
            var $79 = $foreign.transactionBodySetAuxiliaryDataHash(txBody);
            var $80 = Data_Newtype.unwrap();
            return function ($81) {
                return $79($80($81));
            };
        })())();
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.body.networkId)(Control_Bind.composeKleisli(Effect.bindEffect)(convertNetworkId)($foreign.setTxBodyNetworkId(txBody)))();
        Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Control_Bind.composeKleisli(Effect.bindEffect)((function () {
            var $82 = Data_Newtype.unwrap();
            return function ($83) {
                return $foreign.newScriptDataHashFromBytes($82($83));
            };
        })())($foreign.setTxBodyScriptDataHash(txBody)))(v.body.scriptDataHash)();
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.body.withdrawals)(Control_Bind.composeKleisli(Effect.bindEffect)(convertWithdrawals)($foreign.setTxBodyWithdrawals(txBody)))();
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.body.mint)(Control_Bind.composeKleisli(Effect.bindEffect)(convertMint)($foreign.setTxBodyMint(txBody)))();
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.body.certs)(Control_Bind.composeKleisli(Effect.bindEffect)(convertCerts)($foreign.setTxBodyCerts(txBody)))();
        Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.body.collateral)(Control_Bind.composeKleisli(Effect.bindEffect)(convertTxInputs)($foreign.setTxBodyCollateral(txBody)))();
        var ws = Serialization_WitnessSet.convertWitnessSet(v.witnessSet)();
        return $foreign.newTransaction(txBody)(ws)();
    };
};
module.exports = {
    convertTransaction: convertTransaction,
    convertTxInput: convertTxInput,
    convertTxOutput: convertTxOutput,
    hashScriptData: hashScriptData,
    publicKeyFromBech32: publicKeyFromBech32,
    toBytes: $foreign.toBytes,
    newTransactionUnspentOutputFromBytes: $foreign.newTransactionUnspentOutputFromBytes,
    newTransactionWitnessSetFromBytes: $foreign.newTransactionWitnessSetFromBytes,
    publicKeyHash: $foreign.publicKeyHash
};
