// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_Logger_Class = require("../Control.Monad.Logger.Class/index.js");
var Control_Monad_Logger_Trans = require("../Control.Monad.Logger.Trans/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Lens_Getter = require("../Data.Lens.Getter/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Setter = require("../Data.Lens.Setter/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Log_Tag = require("../Data.Log.Tag/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var ProtocolParametersAlonzo = require("../ProtocolParametersAlonzo/index.js");
var QueryM = require("../QueryM/index.js");
var QueryM_Utxos = require("../QueryM.Utxos/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var TxOutput = require("../TxOutput/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_Value = require("../Types.Value/index.js");
var CouldNotGetUtxos = (function () {
    function CouldNotGetUtxos() {

    };
    CouldNotGetUtxos.value = new CouldNotGetUtxos();
    return CouldNotGetUtxos;
})();
var Impossible = (function () {
    function Impossible() {

    };
    Impossible.value = new Impossible();
    return Impossible;
})();
var ReturnAdaChangeError = (function () {
    function ReturnAdaChangeError(value0) {
        this.value0 = value0;
    };
    ReturnAdaChangeError.create = function (value0) {
        return new ReturnAdaChangeError(value0);
    };
    return ReturnAdaChangeError;
})();
var ReturnAdaChangeImpossibleError = (function () {
    function ReturnAdaChangeImpossibleError(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ReturnAdaChangeImpossibleError.create = function (value0) {
        return function (value1) {
            return new ReturnAdaChangeImpossibleError(value0, value1);
        };
    };
    return ReturnAdaChangeImpossibleError;
})();
var ReturnAdaChangeCalculateMinFee = (function () {
    function ReturnAdaChangeCalculateMinFee(value0) {
        this.value0 = value0;
    };
    ReturnAdaChangeCalculateMinFee.create = function (value0) {
        return new ReturnAdaChangeCalculateMinFee(value0);
    };
    return ReturnAdaChangeCalculateMinFee;
})();
var CouldNotGetNamiCollateral = (function () {
    function CouldNotGetNamiCollateral() {

    };
    CouldNotGetNamiCollateral.value = new CouldNotGetNamiCollateral();
    return CouldNotGetNamiCollateral;
})();
var CouldNotGetNamiWalletAddress = (function () {
    function CouldNotGetNamiWalletAddress() {

    };
    CouldNotGetNamiWalletAddress.value = new CouldNotGetNamiWalletAddress();
    return CouldNotGetNamiWalletAddress;
})();
var CannotConvertScriptOutputToTxInput = (function () {
    function CannotConvertScriptOutputToTxInput() {

    };
    CannotConvertScriptOutputToTxInput.value = new CannotConvertScriptOutputToTxInput();
    return CannotConvertScriptOutputToTxInput;
})();
var Expected = function (x) {
    return x;
};
var CollateralUtxosUnavailable = (function () {
    function CollateralUtxosUnavailable() {

    };
    CollateralUtxosUnavailable.value = new CollateralUtxosUnavailable();
    return CollateralUtxosUnavailable;
})();
var Actual = function (x) {
    return x;
};
var CannotMinus = (function () {
    function CannotMinus(value0) {
        this.value0 = value0;
    };
    CannotMinus.create = function (value0) {
        return new CannotMinus(value0);
    };
    return CannotMinus;
})();
var InputsCannotBalanceNonAdaTokens = (function () {
    function InputsCannotBalanceNonAdaTokens() {

    };
    InputsCannotBalanceNonAdaTokens.value = new InputsCannotBalanceNonAdaTokens();
    return InputsCannotBalanceNonAdaTokens;
})();
var BalanceNonAdaOutsCannotMinus = (function () {
    function BalanceNonAdaOutsCannotMinus(value0) {
        this.value0 = value0;
    };
    BalanceNonAdaOutsCannotMinus.create = function (value0) {
        return new BalanceNonAdaOutsCannotMinus(value0);
    };
    return BalanceNonAdaOutsCannotMinus;
})();
var InsufficientTxInputs = (function () {
    function InsufficientTxInputs(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    InsufficientTxInputs.create = function (value0) {
        return function (value1) {
            return new InsufficientTxInputs(value0, value1);
        };
    };
    return InsufficientTxInputs;
})();
var BalanceTxInsCannotMinus = (function () {
    function BalanceTxInsCannotMinus(value0) {
        this.value0 = value0;
    };
    BalanceTxInsCannotMinus.create = function (value0) {
        return new BalanceTxInsCannotMinus(value0);
    };
    return BalanceTxInsCannotMinus;
})();
var GetWalletAddressError$prime = (function () {
    function GetWalletAddressError$prime(value0) {
        this.value0 = value0;
    };
    GetWalletAddressError$prime.create = function (value0) {
        return new GetWalletAddressError$prime(value0);
    };
    return GetWalletAddressError$prime;
})();
var GetWalletCollateralError$prime = (function () {
    function GetWalletCollateralError$prime(value0) {
        this.value0 = value0;
    };
    GetWalletCollateralError$prime.create = function (value0) {
        return new GetWalletCollateralError$prime(value0);
    };
    return GetWalletCollateralError$prime;
})();
var UtxosAtError$prime = (function () {
    function UtxosAtError$prime(value0) {
        this.value0 = value0;
    };
    UtxosAtError$prime.create = function (value0) {
        return new UtxosAtError$prime(value0);
    };
    return UtxosAtError$prime;
})();
var ReturnAdaChangeError$prime = (function () {
    function ReturnAdaChangeError$prime(value0) {
        this.value0 = value0;
    };
    ReturnAdaChangeError$prime.create = function (value0) {
        return new ReturnAdaChangeError$prime(value0);
    };
    return ReturnAdaChangeError$prime;
})();
var AddTxCollateralsError$prime = (function () {
    function AddTxCollateralsError$prime(value0) {
        this.value0 = value0;
    };
    AddTxCollateralsError$prime.create = function (value0) {
        return new AddTxCollateralsError$prime(value0);
    };
    return AddTxCollateralsError$prime;
})();
var GetPublicKeyTransactionInputError$prime = (function () {
    function GetPublicKeyTransactionInputError$prime(value0) {
        this.value0 = value0;
    };
    GetPublicKeyTransactionInputError$prime.create = function (value0) {
        return new GetPublicKeyTransactionInputError$prime(value0);
    };
    return GetPublicKeyTransactionInputError$prime;
})();
var BalanceTxInsError$prime = (function () {
    function BalanceTxInsError$prime(value0) {
        this.value0 = value0;
    };
    BalanceTxInsError$prime.create = function (value0) {
        return new BalanceTxInsError$prime(value0);
    };
    return BalanceTxInsError$prime;
})();
var BalanceNonAdaOutsError$prime = (function () {
    function BalanceNonAdaOutsError$prime(value0) {
        this.value0 = value0;
    };
    BalanceNonAdaOutsError$prime.create = function (value0) {
        return new BalanceNonAdaOutsError$prime(value0);
    };
    return BalanceNonAdaOutsError$prime;
})();
var CalculateMinFeeError$prime = (function () {
    function CalculateMinFeeError$prime(value0) {
        this.value0 = value0;
    };
    CalculateMinFeeError$prime.create = function (value0) {
        return new CalculateMinFeeError$prime(value0);
    };
    return CalculateMinFeeError$prime;
})();
var CollectTxInsInsufficientTxInputs = (function () {
    function CollectTxInsInsufficientTxInputs(value0) {
        this.value0 = value0;
    };
    CollectTxInsInsufficientTxInputs.create = function (value0) {
        return new CollectTxInsInsufficientTxInputs(value0);
    };
    return CollectTxInsInsufficientTxInputs;
})();
var size = function (v) {
    var roundupBytesToWords = function (b$prime) {
        return Data_BigInt.quot(Data_Semiring.add(Data_BigInt.semiringBigInt)(b$prime)(Data_BigInt.fromInt(7)))(Data_BigInt.fromInt(8));
    };
    var b = Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(Types_Value.numTokenNames(v))(Data_BigInt.fromInt(12)))(Types_Value.sumTokenNameLengths(v)))(Data_Semiring.mul(Data_BigInt.semiringBigInt)(Types_Value.numCurrencySymbols(v))(ProtocolParametersAlonzo.pidSize));
    return Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_BigInt.fromInt(6))(roundupBytesToWords(b));
};
var newtypeExpected = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeActual = {
    Coercible0: function () {
        return undefined;
    }
};
var getPublicKeyTransactionInput = function (v) {
    return Data_Either.note(CannotConvertScriptOutputToTxInput.value)(Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_Address.addressPaymentCred((function (v1) {
        return v1.address;
    })(Data_Newtype.unwrap()(v.value1))))(function (paymentCred) {
        return Serialization_Address.withStakeCredential({
            onKeyHash: Data_Function["const"](Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.value0)),
            onScriptHash: Data_Function["const"](Data_Maybe.Nothing.value)
        })(paymentCred);
    }));
};
var utxosToTransactionInput = (function () {
    var $271 = Data_Array.mapMaybe(function ($274) {
        return Data_Either.hush(getPublicKeyTransactionInput($274));
    });
    var $272 = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
    return function ($273) {
        return $271($272($273));
    };
})();
var getAmount = (function () {
    var $275 = Data_Newtype.unwrap();
    return function ($276) {
        return (function (v) {
            return v.amount;
        })($275($276));
    };
})();
var getInputValue = function (utxos) {
    return function (v) {
        return Data_Array.foldMap(Types_Value.monoidValue)(getAmount)(Data_Array.mapMaybe(Data_Function.flip(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput))(utxos))((function (v1) {
            return v1.inputs;
        })(v)));
    };
};
var logTx$prime = function (dictMonadEffect) {
    return function (dictMonadLogger) {
        return function (msg) {
            return function (utxos) {
                return function (v) {
                    return Data_Foldable.traverse_((dictMonadEffect.Monad0()).Applicative0())(Data_Foldable.foldableArray)(Control_Monad_Logger_Class.trace(dictMonadLogger)(Data_Log_Tag.tag(msg)(Data_Monoid.mempty(Data_Monoid.monoidString))))([ "Input Value: " + Data_Show.show(Types_Value.showValue)(getInputValue(utxos)(v.body)), "Output Value: " + Data_Show.show(Types_Value.showValue)(Data_Array.foldMap(Types_Value.monoidValue)(getAmount)(v.body.outputs)), "Fees: " + Data_Show.show(Types_Value.showCoin)(v.body.fee) ]);
                };
            };
        };
    };
};
var logTx = function (dictMonadEffect) {
    return function (dictMonadLogger) {
        return function (msg) {
            return function (utxo) {
                return function (tx) {
                    return Control_Apply.applySecond(((dictMonadEffect.Monad0()).Bind1()).Apply0())(logTx$prime(dictMonadEffect)(dictMonadLogger)(msg)(utxo)(tx))(Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(tx));
                };
            };
        };
    };
};
var txInsValue = function (utxos) {
    var $277 = Data_Array.foldMap(Types_Value.monoidValue)(getAmount);
    var $278 = Data_Array.mapMaybe(Data_Function.flip(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput))(utxos));
    return function ($279) {
        return $277($278($279));
    };
};
var genericUtxosAtError = {
    to: function (x) {
        return CouldNotGetUtxos.value;
    },
    from: function (x) {
        return Data_Generic_Rep.NoArguments.value;
    }
};
var showUtxosAtError = {
    show: Data_Show_Generic.genericShow(genericUtxosAtError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "CouldNotGetUtxos";
        }
    }))
};
var genericReturnAdaChangeError = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new ReturnAdaChangeError(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new ReturnAdaChangeImpossibleError(x.value0.value0.value0, x.value0.value0.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
            return new ReturnAdaChangeCalculateMinFee(x.value0.value0);
        };
        throw new Error("Failed pattern match at BalanceTx (line 146, column 1 - line 146, column 78): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof ReturnAdaChangeError) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof ReturnAdaChangeImpossibleError) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)));
        };
        if (x instanceof ReturnAdaChangeCalculateMinFee) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
        };
        throw new Error("Failed pattern match at BalanceTx (line 146, column 1 - line 146, column 78): " + [ x.constructor.name ]);
    }
};
var genericImpossibleError = {
    to: function (x) {
        return Impossible.value;
    },
    from: function (x) {
        return Data_Generic_Rep.NoArguments.value;
    }
};
var showImpossibleError = {
    show: Data_Show_Generic.genericShow(genericImpossibleError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "Impossible";
        }
    }))
};
var showReturnAdaChangeError = {
    show: Data_Show_Generic.genericShow(genericReturnAdaChangeError)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
        reflectSymbol: function () {
            return "ReturnAdaChangeError";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))(Data_Show_Generic.genericShowArgsArgument(showImpossibleError)))({
        reflectSymbol: function () {
            return "ReturnAdaChangeImpossibleError";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(QueryM.showClientError))({
        reflectSymbol: function () {
            return "ReturnAdaChangeCalculateMinFee";
        }
    }))))
};
var genericGetWalletCollateralError = {
    to: function (x) {
        return CouldNotGetNamiCollateral.value;
    },
    from: function (x) {
        return Data_Generic_Rep.NoArguments.value;
    }
};
var showGetWalletCollateralError = {
    show: Data_Show_Generic.genericShow(genericGetWalletCollateralError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "CouldNotGetNamiCollateral";
        }
    }))
};
var genericGetWalletAddressError = {
    to: function (x) {
        return CouldNotGetNamiWalletAddress.value;
    },
    from: function (x) {
        return Data_Generic_Rep.NoArguments.value;
    }
};
var showGetWalletAddressError = {
    show: Data_Show_Generic.genericShow(genericGetWalletAddressError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "CouldNotGetNamiWalletAddress";
        }
    }))
};
var genericGetPublicKeyTransactionInputError = {
    to: function (x) {
        return CannotConvertScriptOutputToTxInput.value;
    },
    from: function (x) {
        return Data_Generic_Rep.NoArguments.value;
    }
};
var showGetPublicKeyTransactionInputError = {
    show: Data_Show_Generic.genericShow(genericGetPublicKeyTransactionInputError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "CannotConvertScriptOutputToTxInput";
        }
    }))
};
var genericExpected = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showExpected = {
    show: Data_Show_Generic.genericShow(genericExpected)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Value.showValue))({
        reflectSymbol: function () {
            return "Expected";
        }
    }))
};
var genericCollectTxInsError = {
    to: function (x) {
        return new CollectTxInsInsufficientTxInputs(x);
    },
    from: function (x) {
        return x.value0;
    }
};
var genericCannotMinusError = {
    to: function (x) {
        return new CannotMinus(x);
    },
    from: function (x) {
        return x.value0;
    }
};
var genericBalanceTxInsError = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new InsufficientTxInputs(x.value0.value0, x.value0.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new BalanceTxInsCannotMinus(x.value0);
        };
        throw new Error("Failed pattern match at BalanceTx (line 171, column 1 - line 171, column 72): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof InsufficientTxInputs) {
            return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
        };
        if (x instanceof BalanceTxInsCannotMinus) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at BalanceTx (line 171, column 1 - line 171, column 72): " + [ x.constructor.name ]);
    }
};
var genericBalanceTxError = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new GetWalletAddressError$prime(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new GetWalletCollateralError$prime(x.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
            return new UtxosAtError$prime(x.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
            return new ReturnAdaChangeError$prime(x.value0.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
            return new AddTxCollateralsError$prime(x.value0.value0.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
            return new GetPublicKeyTransactionInputError$prime(x.value0.value0.value0.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
            return new BalanceTxInsError$prime(x.value0.value0.value0.value0.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
            return new BalanceNonAdaOutsError$prime(x.value0.value0.value0.value0.value0.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))))) {
            return new CalculateMinFeeError$prime(x.value0.value0.value0.value0.value0.value0.value0.value0);
        };
        throw new Error("Failed pattern match at BalanceTx (line 114, column 1 - line 114, column 66): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof GetWalletAddressError$prime) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof GetWalletCollateralError$prime) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        };
        if (x instanceof UtxosAtError$prime) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
        };
        if (x instanceof ReturnAdaChangeError$prime) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
        };
        if (x instanceof AddTxCollateralsError$prime) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
        };
        if (x instanceof GetPublicKeyTransactionInputError$prime) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
        };
        if (x instanceof BalanceTxInsError$prime) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))));
        };
        if (x instanceof BalanceNonAdaOutsError$prime) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))));
        };
        if (x instanceof CalculateMinFeeError$prime) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))))))));
        };
        throw new Error("Failed pattern match at BalanceTx (line 114, column 1 - line 114, column 66): " + [ x.constructor.name ]);
    }
};
var genericBalanceNonAdaOutsError = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return InputsCannotBalanceNonAdaTokens.value;
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new BalanceNonAdaOutsCannotMinus(x.value0);
        };
        throw new Error("Failed pattern match at BalanceTx (line 210, column 1 - line 211, column 35): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof InputsCannotBalanceNonAdaTokens) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof BalanceNonAdaOutsCannotMinus) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at BalanceTx (line 210, column 1 - line 211, column 35): " + [ x.constructor.name ]);
    }
};
var genericAddTxCollateralsError = {
    to: function (x) {
        return CollateralUtxosUnavailable.value;
    },
    from: function (x) {
        return Data_Generic_Rep.NoArguments.value;
    }
};
var showAddTxCollateralsError = {
    show: Data_Show_Generic.genericShow(genericAddTxCollateralsError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "CollateralUtxosUnavailable";
        }
    }))
};
var genericActual = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showActual = {
    show: Data_Show_Generic.genericShow(genericActual)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Value.showValue))({
        reflectSymbol: function () {
            return "Actual";
        }
    }))
};
var showCannotMinusError = {
    show: Data_Show_Generic.genericShow(genericCannotMinusError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showActual))({
        reflectSymbol: function () {
            return "CannotMinus";
        }
    }))
};
var showBalanceNonAdaOutsError = {
    show: Data_Show_Generic.genericShow(genericBalanceNonAdaOutsError)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "InputsCannotBalanceNonAdaTokens";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showCannotMinusError))({
        reflectSymbol: function () {
            return "BalanceNonAdaOutsCannotMinus";
        }
    })))
};
var showBalanceTxInsError = {
    show: Data_Show_Generic.genericShow(genericBalanceTxInsError)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showExpected))(Data_Show_Generic.genericShowArgsArgument(showActual)))({
        reflectSymbol: function () {
            return "InsufficientTxInputs";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showCannotMinusError))({
        reflectSymbol: function () {
            return "BalanceTxInsCannotMinus";
        }
    })))
};
var showBalanceTxError = {
    show: Data_Show_Generic.genericShow(genericBalanceTxError)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showGetWalletAddressError))({
        reflectSymbol: function () {
            return "GetWalletAddressError'";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showGetWalletCollateralError))({
        reflectSymbol: function () {
            return "GetWalletCollateralError'";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showUtxosAtError))({
        reflectSymbol: function () {
            return "UtxosAtError'";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showReturnAdaChangeError))({
        reflectSymbol: function () {
            return "ReturnAdaChangeError'";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showAddTxCollateralsError))({
        reflectSymbol: function () {
            return "AddTxCollateralsError'";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showGetPublicKeyTransactionInputError))({
        reflectSymbol: function () {
            return "GetPublicKeyTransactionInputError'";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showBalanceTxInsError))({
        reflectSymbol: function () {
            return "BalanceTxInsError'";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showBalanceNonAdaOutsError))({
        reflectSymbol: function () {
            return "BalanceNonAdaOutsError'";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(QueryM.showClientError))({
        reflectSymbol: function () {
            return "CalculateMinFeeError'";
        }
    }))))))))))
};
var showCollectTxInsError = {
    show: Data_Show_Generic.genericShow(genericCollectTxInsError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showBalanceTxInsError))({
        reflectSymbol: function () {
            return "CollectTxInsInsufficientTxInputs";
        }
    }))
};
var dataHashSize = function (v) {
    if (v instanceof Data_Maybe.Nothing) {
        return Data_Semiring.zero(Data_BigInt.semiringBigInt);
    };
    if (v instanceof Data_Maybe.Just) {
        return Data_BigInt.fromInt(10);
    };
    throw new Error("Failed pattern match at BalanceTx (line 582, column 1 - line 582, column 41): " + [ v.constructor.name ]);
};
var collectTxIns = function (originalTxIns) {
    return function (utxos) {
        return function (value) {
            var isSufficient = function (txIns$prime) {
                return !Data_Array["null"](txIns$prime) && Types_Value.geq(txInsValue(utxos)(txIns$prime))(value);
            };
            var updatedInputs = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (newTxIns) {
                return function (txIn) {
                    var $203 = isSufficient(newTxIns);
                    if ($203) {
                        return newTxIns;
                    };
                    return Data_Array.insert(Types_Transaction.ordTransactionInput)(txIn)(newTxIns);
                };
            })(originalTxIns)(utxosToTransactionInput(utxos));
            var $204 = isSufficient(updatedInputs);
            if ($204) {
                return Control_Applicative.pure(Data_Either.applicativeEither)(updatedInputs);
            };
            return Data_Either.Left.create(CollectTxInsInsufficientTxInputs.create(new InsufficientTxInputs(value, Actual(txInsValue(utxos)(updatedInputs)))));
        };
    };
};
var calculateMinUtxo = function (txOut) {
    var utxoEntrySize = function (v) {
        var $206 = Types_Value.isAdaOnly(v.amount);
        if ($206) {
            return Data_Semiring.add(Data_BigInt.semiringBigInt)(ProtocolParametersAlonzo.utxoEntrySizeWithoutVal)(ProtocolParametersAlonzo.coinSize);
        };
        return Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(ProtocolParametersAlonzo.utxoEntrySizeWithoutVal)(size(v.amount)))(dataHashSize(v.dataHash));
    };
    return Data_Semiring.mul(Data_BigInt.semiringBigInt)(Data_Newtype.unwrap()(ProtocolParametersAlonzo.lovelacePerUTxOWord))(utxoEntrySize(txOut));
};
var calculateMinUtxos = Data_Functor.map(Data_Functor.functorArray)(function (a) {
    return new Data_Tuple.Tuple(a, calculateMinUtxo(a));
});
var calculateMinFee$prime = (function () {
    var $280 = Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(Data_Bifunctor.rmap(Data_Bifunctor.bifunctorEither)(Data_Newtype.unwrap()));
    return function ($281) {
        return $280(QueryM.calculateMinFee($281));
    };
})();
var returnAdaChange = function (changeAddr) {
    return function (utxos) {
        return function (v) {
            return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(calculateMinFee$prime(Data_Newtype.wrap()(v)))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(ReturnAdaChangeCalculateMinFee.create))))(function (fees) {
                var outputValue = Data_Array.foldMap(Types_Value.monoidValue)(getAmount)(v.body.outputs);
                var outputAda = Types_Value.getLovelace(Types_Value.valueToCoin(outputValue));
                var inputValue = getInputValue(utxos)(Data_Newtype.wrap()(v.body));
                var inputAda = Types_Value.getLovelace(Types_Value.valueToCoin(inputValue));
                var returnAda = Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Ring.sub(Data_BigInt.ringBigInt)(inputAda)(outputAda))(fees);
                var v1 = Data_Ord.compare(Data_BigInt.ordBigInt)(returnAda)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                if (v1 instanceof Data_Ordering.LT) {
                    return Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Data_Either.Left.create(new ReturnAdaChangeImpossibleError("Not enough Input Ada to cover output and fees after prebalance.", Impossible.value)));
                };
                if (v1 instanceof Data_Ordering.EQ) {
                    return Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Data_Either.Right.create(Data_Newtype.wrap()({
                        body: Data_Newtype.wrap()({
                            fee: Data_Newtype.wrap()(fees),
                            auxiliaryDataHash: v.body.auxiliaryDataHash,
                            certs: v.body.certs,
                            collateral: v.body.collateral,
                            inputs: v.body.inputs,
                            mint: v.body.mint,
                            networkId: v.body.networkId,
                            outputs: v.body.outputs,
                            requiredSigners: v.body.requiredSigners,
                            scriptDataHash: v.body.scriptDataHash,
                            ttl: v.body.ttl,
                            update: v.body.update,
                            validityStartInterval: v.body.validityStartInterval,
                            withdrawals: v.body.withdrawals
                        }),
                        auxiliaryData: v.auxiliaryData,
                        isValid: v.isValid,
                        witnessSet: v.witnessSet
                    })));
                };
                if (v1 instanceof Data_Ordering.GT) {
                    var changeIndex = Data_Array.findIndex((function () {
                        var $282 = Data_Eq.eq(Serialization_Address.eqAddress)(changeAddr);
                        var $283 = Data_Newtype.unwrap();
                        return function ($284) {
                            return $282((function (v2) {
                                return v2.address;
                            })($283($284)));
                        };
                    })())(v.body.outputs);
                    if (changeIndex instanceof Data_Maybe.Just) {
                        return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new ReturnAdaChangeError("Couldn't modify utxo to return change."))(Data_Array.modifyAt(changeIndex.value0)(function (v2) {
                            return {
                                address: v2.address,
                                amount: Data_Semigroup.append(Types_Value.semigroupValue)(v2.amount)(Types_Value.lovelaceValueOf(returnAda)),
                                dataHash: v2.dataHash
                            };
                        })(v.body.outputs)))(function (newOutputs) {
                            return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                                body: Data_Newtype.wrap()({
                                    outputs: newOutputs,
                                    fee: Data_Newtype.wrap()(fees),
                                    auxiliaryDataHash: v.body.auxiliaryDataHash,
                                    certs: v.body.certs,
                                    collateral: v.body.collateral,
                                    inputs: v.body.inputs,
                                    mint: v.body.mint,
                                    networkId: v.body.networkId,
                                    requiredSigners: v.body.requiredSigners,
                                    scriptDataHash: v.body.scriptDataHash,
                                    ttl: v.body.ttl,
                                    update: v.body.update,
                                    validityStartInterval: v.body.validityStartInterval,
                                    withdrawals: v.body.withdrawals
                                }),
                                auxiliaryData: v.auxiliaryData,
                                isValid: v.isValid,
                                witnessSet: v.witnessSet
                            }));
                        }));
                    };
                    if (changeIndex instanceof Data_Maybe.Nothing) {
                        var utxoCost = Types_Value.getLovelace(ProtocolParametersAlonzo.protocolParamUTxOCostPerWord);
                        var txBody$prime = Data_Newtype.wrap()({
                            outputs: Data_Array.cons(Data_Newtype.wrap()({
                                address: changeAddr,
                                amount: Types_Value.lovelaceValueOf(returnAda),
                                dataHash: Data_Maybe.Nothing.value
                            }))(v.body.outputs),
                            auxiliaryDataHash: v.body.auxiliaryDataHash,
                            certs: v.body.certs,
                            collateral: v.body.collateral,
                            fee: v.body.fee,
                            inputs: v.body.inputs,
                            mint: v.body.mint,
                            networkId: v.body.networkId,
                            requiredSigners: v.body.requiredSigners,
                            scriptDataHash: v.body.scriptDataHash,
                            ttl: v.body.ttl,
                            update: v.body.update,
                            validityStartInterval: v.body.validityStartInterval,
                            withdrawals: v.body.withdrawals
                        });
                        var tx$prime = Data_Newtype.wrap()({
                            body: txBody$prime,
                            auxiliaryData: v.auxiliaryData,
                            isValid: v.isValid,
                            witnessSet: v.witnessSet
                        });
                        var changeMinUtxo = Data_Semiring.mul(Data_BigInt.semiringBigInt)(ProtocolParametersAlonzo.adaOnlyWords)(utxoCost);
                        return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(ReturnAdaChangeCalculateMinFee.create))(calculateMinFee$prime(tx$prime)))(function (fees$prime$prime) {
                            return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Control_Bind.bind(Data_Either.bindEither)(fees$prime$prime)(function (fees$prime) {
                                var returnAda$prime = Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(returnAda)(fees))(fees$prime);
                                var $215 = Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(returnAda$prime)(changeMinUtxo);
                                if ($215) {
                                    return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new ReturnAdaChangeImpossibleError("Couldn't modify head utxo to add Ada", Impossible.value))(Data_Array.modifyAt(0)(function (v2) {
                                        return {
                                            address: v2.address,
                                            amount: Types_Value.lovelaceValueOf(returnAda$prime),
                                            dataHash: v2.dataHash
                                        };
                                    })((function (v2) {
                                        return v2.outputs;
                                    })(Data_Newtype.unwrap()(txBody$prime)))))(function (newOutputs) {
                                        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                                            body: Data_Newtype.wrap()({
                                                outputs: newOutputs,
                                                fee: Data_Newtype.wrap()(fees$prime),
                                                auxiliaryDataHash: v.body.auxiliaryDataHash,
                                                certs: v.body.certs,
                                                collateral: v.body.collateral,
                                                inputs: v.body.inputs,
                                                mint: v.body.mint,
                                                networkId: v.body.networkId,
                                                requiredSigners: v.body.requiredSigners,
                                                scriptDataHash: v.body.scriptDataHash,
                                                ttl: v.body.ttl,
                                                update: v.body.update,
                                                validityStartInterval: v.body.validityStartInterval,
                                                withdrawals: v.body.withdrawals
                                            }),
                                            auxiliaryData: v.auxiliaryData,
                                            isValid: v.isValid,
                                            witnessSet: v.witnessSet
                                        }));
                                    });
                                };
                                return Data_Either.Left.create(new ReturnAdaChangeError("ReturnAda' does not cover min. utxo requirement for single Ada-only output."));
                            }));
                        });
                    };
                    throw new Error("Failed pattern match at BalanceTx (line 474, column 9 - line 552, column 46): " + [ changeIndex.constructor.name ]);
                };
                throw new Error("Failed pattern match at BalanceTx (line 453, column 5 - line 552, column 46): " + [ v1.constructor.name ]);
            }));
        };
    };
};
var balanceTxIns$prime = function (utxos) {
    return function (fees) {
        return function (v) {
            var utxoCost = Types_Value.getLovelace(ProtocolParametersAlonzo.protocolParamUTxOCostPerWord);
            var mintVal = Data_Maybe.maybe(Data_Monoid.mempty(Types_Value.monoidValue))((function () {
                var $285 = Types_Value.mkValue(Types_Value.mkCoin(0));
                var $286 = Data_Newtype.unwrap();
                return function ($287) {
                    return $285($286($287));
                };
            })())(v.mint);
            var changeMinUtxo = Data_Semiring.mul(Data_BigInt.semiringBigInt)(ProtocolParametersAlonzo.adaOnlyWords)(utxoCost);
            return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(BalanceTxInsCannotMinus.create(CannotMinus.create(Data_Newtype.wrap()(mintVal))))(Types_Value.minus(Data_Array.foldMap(Types_Value.monoidValue)(getAmount)(v.outputs))(mintVal)))(function (nonMintedValue) {
                var minSpending = Data_Semigroup.append(Types_Value.semigroupValue)(Types_Value.lovelaceValueOf(Data_Semiring.add(Data_BigInt.semiringBigInt)(fees)(changeMinUtxo)))(nonMintedValue);
                return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function (v1) {
                    return v1.value0;
                })(collectTxIns(v.inputs)(utxos)(minSpending)))(function (v1) {
                    return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                        inputs: Data_Array.union(Types_Transaction.eqTransactionInput)(v1)(v.inputs),
                        auxiliaryDataHash: v.auxiliaryDataHash,
                        certs: v.certs,
                        collateral: v.collateral,
                        fee: v.fee,
                        mint: v.mint,
                        networkId: v.networkId,
                        outputs: v.outputs,
                        requiredSigners: v.requiredSigners,
                        scriptDataHash: v.scriptDataHash,
                        ttl: v.ttl,
                        update: v.update,
                        validityStartInterval: v.validityStartInterval,
                        withdrawals: v.withdrawals
                    }));
                });
            });
        };
    };
};
var balanceTxIns = function (utxos) {
    return function (fees) {
        return function (txbody) {
            return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(BalanceTxInsError$prime.create)(balanceTxIns$prime(utxos)(fees)(txbody));
        };
    };
};
var balanceNonAdaOuts$prime = function (changeAddr) {
    return function (utxos) {
        return function (v) {
            var outputValue = Data_Array.foldMap(Types_Value.monoidValue)(getAmount)(v.outputs);
            var mintVal = Data_Maybe.maybe(Data_Monoid.mempty(Types_Value.monoidValue))((function () {
                var $288 = Types_Value.mkValue(Types_Value.mkCoin(0));
                var $289 = Data_Newtype.unwrap();
                return function ($290) {
                    return $288($289($290));
                };
            })())(v.mint);
            var inputValue = getInputValue(utxos)(v);
            return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(BalanceNonAdaOutsCannotMinus.create(CannotMinus.create(Data_Newtype.wrap()(mintVal))))(Types_Value.minus(outputValue)(mintVal)))(function (nonMintedOutputValue) {
                var v1 = Types_Value.filterNonAda(nonMintedOutputValue);
                return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(BalanceNonAdaOutsCannotMinus.create(CannotMinus.create(Data_Newtype.wrap()(v1))))(Types_Value.minus(Types_Value.filterNonAda(inputValue))(v1)))(function (nonAdaChange) {
                    var outputs = Data_Array.fromFoldable(Data_List_Types.foldableList)((function () {
                        var v2 = Data_List.partition((function () {
                            var $291 = Data_Eq.eq(Serialization_Address.eqAddress)(changeAddr);
                            var $292 = Data_Newtype.unwrap();
                            return function ($293) {
                                return $291((function (v3) {
                                    return v3.address;
                                })($292($293)));
                            };
                        })())(Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(v.outputs));
                        if (v2.yes instanceof Data_List_Types.Nil) {
                            return new Data_List_Types.Cons({
                                address: changeAddr,
                                amount: nonAdaChange,
                                dataHash: Data_Maybe.Nothing.value
                            }, v2.no);
                        };
                        if (v2.yes instanceof Data_List_Types.Cons) {
                            return Data_Semigroup.append(Data_List_Types.semigroupList)(new Data_List_Types.Cons({
                                address: v2.yes.value0.address,
                                amount: Data_Semigroup.append(Types_Value.semigroupValue)(v2.yes.value0.amount)(nonAdaChange),
                                dataHash: v2.yes.value0.dataHash
                            }, v2.yes.value1))(v2.no);
                        };
                        throw new Error("Failed pattern match at BalanceTx (line 814, column 9 - line 830, column 71): " + [ v2.constructor.name ]);
                    })());
                    var $236 = Types_Value.isPos(nonAdaChange);
                    if ($236) {
                        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                            outputs: outputs,
                            auxiliaryDataHash: v.auxiliaryDataHash,
                            certs: v.certs,
                            collateral: v.collateral,
                            fee: v.fee,
                            inputs: v.inputs,
                            mint: v.mint,
                            networkId: v.networkId,
                            requiredSigners: v.requiredSigners,
                            scriptDataHash: v.scriptDataHash,
                            ttl: v.ttl,
                            update: v.update,
                            validityStartInterval: v.validityStartInterval,
                            withdrawals: v.withdrawals
                        }));
                    };
                    var $237 = Types_Value.isZero(nonAdaChange);
                    if ($237) {
                        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()(v));
                    };
                    return new Data_Either.Left(InputsCannotBalanceNonAdaTokens.value);
                });
            });
        };
    };
};
var balanceNonAdaOuts = function (changeAddr) {
    return function (utxos) {
        return function (txBody) {
            return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(BalanceNonAdaOutsError$prime.create)(balanceNonAdaOuts$prime(changeAddr)(utxos)(txBody));
        };
    };
};
var addTxCollateral = function (v) {
    return function (txUnspentOutput) {
        return Data_Newtype.wrap()({
            body: Data_Newtype.wrap()({
                collateral: Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Array.singleton((Data_Newtype.unwrap()(txUnspentOutput)).input)),
                auxiliaryDataHash: v.body.auxiliaryDataHash,
                certs: v.body.certs,
                fee: v.body.fee,
                inputs: v.body.inputs,
                mint: v.body.mint,
                networkId: v.body.networkId,
                outputs: v.body.outputs,
                requiredSigners: v.body.requiredSigners,
                scriptDataHash: v.body.scriptDataHash,
                ttl: v.body.ttl,
                update: v.body.update,
                validityStartInterval: v.body.validityStartInterval,
                withdrawals: v.body.withdrawals
            }),
            auxiliaryData: v.auxiliaryData,
            isValid: v.isValid,
            witnessSet: v.witnessSet
        });
    };
};
var addLovelaces = function (minLovelaces) {
    return function (v) {
        var lovelacesAdded = Data_Functor.map(Data_Functor.functorArray)(function (txOut$prime) {
            var txOut = Data_Newtype.unwrap()(txOut$prime);
            var minUtxo = Data_Maybe.fromMaybe(Data_Semiring.zero(Data_BigInt.semiringBigInt))(Data_Foldable.lookup(Data_Foldable.foldableArray)(Types_Transaction.eqTransactionOutput)(txOut$prime)(minLovelaces));
            var lovelaces = Types_Value.getLovelace(Types_Value.valueToCoin(txOut.amount));
            return Data_Newtype.wrap()((function () {
                var $243 = {};
                for (var $244 in txOut) {
                    if ({}.hasOwnProperty.call(txOut, $244)) {
                        $243[$244] = txOut[$244];
                    };
                };
                $243.amount = Data_Semigroup.append(Types_Value.semigroupValue)(txOut.amount)(Types_Value.lovelaceValueOf(Data_Ord.max(Data_BigInt.ordBigInt)(Data_Semiring.zero(Data_BigInt.semiringBigInt))(Data_Ring.sub(Data_BigInt.ringBigInt)(minUtxo)(lovelaces))));
                return $243;
            })());
        })(v.outputs);
        return Data_Newtype.wrap()({
            outputs: lovelacesAdded,
            auxiliaryDataHash: v.auxiliaryDataHash,
            certs: v.certs,
            collateral: v.collateral,
            fee: v.fee,
            inputs: v.inputs,
            mint: v.mint,
            networkId: v.networkId,
            requiredSigners: v.requiredSigners,
            scriptDataHash: v.scriptDataHash,
            ttl: v.ttl,
            update: v.update,
            validityStartInterval: v.validityStartInterval,
            withdrawals: v.withdrawals
        });
    };
};
var preBalanceTxBody = function (minUtxos) {
    return function (fees) {
        return function (utxos) {
            return function (ownAddr) {
                return function (txBody) {
                    return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Control_Applicative.pure(Data_Either.applicativeEither)(addLovelaces(minUtxos)(txBody)))(balanceTxIns(utxos)(fees)))(balanceNonAdaOuts(ownAddr)(utxos));
                };
            };
        };
    };
};
var balanceTx = function (v) {
    var prebalanceCollateral = function (fees$prime) {
        return function (utxoIndex$prime) {
            return function (ownAddr$prime) {
                return function (v1) {
                    return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(balanceTxIns(utxoIndex$prime)(fees$prime)(v1.body))(balanceNonAdaOuts(ownAddr$prime)(utxoIndex$prime)))(function (txBody$prime) {
                        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()((function () {
                            var v2 = Data_Newtype.unwrap()(v1);
                            var $251 = {};
                            for (var $252 in v2) {
                                if ({}.hasOwnProperty.call(v2, $252)) {
                                    $251[$252] = v2[$252];
                                };
                            };
                            $251.body = txBody$prime;
                            return $251;
                        })()));
                    });
                };
            };
        };
    };
    var feeBuffer = Data_BigInt.fromInt(500000);
    var chainedBalancer = function (minUtxos$prime) {
        return function (utxoIndex$prime) {
            return function (ownAddr$prime) {
                return function (v1) {
                    return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(preBalanceTxBody(minUtxos$prime)(Data_Semiring.zero(Data_BigInt.semiringBigInt))(utxoIndex$prime)(ownAddr$prime)(v1.body)))(function (txBodyWithoutFees$prime) {
                        var tx$prime$prime = Data_Newtype.wrap()({
                            body: txBodyWithoutFees$prime,
                            auxiliaryData: v1.auxiliaryData,
                            isValid: v1.isValid,
                            witnessSet: v1.witnessSet
                        });
                        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(calculateMinFee$prime(tx$prime$prime))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(CalculateMinFeeError$prime.create))))(function (fees$prime) {
                            return Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(preBalanceTxBody(minUtxos$prime)(Data_Semiring.add(Data_BigInt.semiringBigInt)(fees$prime)(feeBuffer))(utxoIndex$prime)(ownAddr$prime)(v1.body));
                        });
                    }));
                };
            };
        };
    };
    var loop = function (utxoIndex$prime) {
        return function (ownAddr$prime) {
            return function (prevMinUtxos$prime) {
                return function (v1) {
                    var nextMinUtxos$prime = calculateMinUtxos(Data_Array.difference(Types_Transaction.eqTransactionOutput)(v1.body.outputs)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(prevMinUtxos$prime)));
                    var minUtxos$prime = Data_Semigroup.append(Data_Semigroup.semigroupArray)(prevMinUtxos$prime)(nextMinUtxos$prime);
                    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(chainedBalancer(minUtxos$prime)(utxoIndex$prime)(ownAddr$prime)(v1))(function (balancedTxBody$prime) {
                        if (balancedTxBody$prime instanceof Data_Either.Left) {
                            return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(new Data_Either.Left(balancedTxBody$prime.value0));
                        };
                        if (balancedTxBody$prime instanceof Data_Either.Right) {
                            var $266 = Data_Eq.eq(Types_Transaction.eqTxBody)(v1.body)(balancedTxBody$prime.value0);
                            if ($266) {
                                return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Data_Either.Right.create(Data_Newtype.wrap()({
                                    body: balancedTxBody$prime.value0,
                                    auxiliaryData: v1.auxiliaryData,
                                    isValid: v1.isValid,
                                    witnessSet: v1.witnessSet
                                })));
                            };
                            return loop(utxoIndex$prime)(ownAddr$prime)(minUtxos$prime)(Data_Newtype.wrap()({
                                body: balancedTxBody$prime.value0,
                                auxiliaryData: v1.auxiliaryData,
                                isValid: v1.isValid,
                                witnessSet: v1.witnessSet
                            }));
                        };
                        throw new Error("Failed pattern match at BalanceTx (line 329, column 5 - line 339, column 51): " + [ balancedTxBody$prime.constructor.name ]);
                    });
                };
            };
        };
    };
    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Data_Maybe.maybe(Control_Monad_Reader_Class.asks(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(function (v1) {
        return v1.networkId;
    }))(Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff))))(Data_Lens_Getter.viewOn(v.transaction)((function () {
        var $294 = Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget);
        var $295 = Types_Transaction["_networkId"](Data_Lens_Internal_Forget.strongForget);
        return function ($296) {
            return $294($295($296));
        };
    })())))(function (networkId) {
        var unbalancedTx$prime = Data_Lens_Setter.set((function () {
            var $297 = Types_Transaction["_body"](Data_Profunctor_Strong.strongFn);
            var $298 = Types_Transaction["_networkId"](Data_Profunctor_Strong.strongFn);
            return function ($299) {
                return $297($298($299));
            };
        })())(new Data_Maybe.Just(networkId))(v.transaction);
        return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM.getWalletAddress)(Data_Either.note(new GetWalletAddressError$prime(CouldNotGetNamiWalletAddress.value)))))(function (ownAddr) {
            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM.getWalletCollateral)(Data_Either.note(new GetWalletCollateralError$prime(CouldNotGetNamiCollateral.value)))))(function (collateral) {
                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM_Utxos.utxosAt(ownAddr))((function () {
                    var $300 = Data_Functor.map(Data_Either.functorEither)(Data_Newtype.unwrap());
                    var $301 = Data_Either.note(new UtxosAtError$prime(CouldNotGetUtxos.value));
                    return function ($302) {
                        return $300($301($302));
                    };
                })())))(function (utxos) {
                    var unbalancedCollTx = addTxCollateral(unbalancedTx$prime)(collateral);
                    var allUtxos = Data_Map_Internal.union(Types_Transaction.ordTransactionInput)(utxos)(TxOutput.utxoIndexToUtxo(networkId)(v.utxoIndex));
                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(logTx$prime(Control_Monad_Except_Trans.monadEffectExceptT(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff))))(Control_Monad_Logger_Class.monadLoggerExceptT(Control_Monad_Logger_Class.monadLoggerReaderT(Control_Monad_Logger_Trans.monadLoggerLoggerT(Effect_Aff.monadEffectAff))))("Unbalanced Collaterised Tx ")(allUtxos)(unbalancedCollTx))(function () {
                        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(prebalanceCollateral(Data_Semiring.zero(Data_BigInt.semiringBigInt))(allUtxos)(ownAddr)(unbalancedCollTx)))(function (ubcTx) {
                            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(calculateMinFee$prime(ubcTx))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(CalculateMinFeeError$prime.create))))(function (fees) {
                                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(prebalanceCollateral(Data_Semiring.add(Data_BigInt.semiringBigInt)(fees)(feeBuffer))(allUtxos)(ownAddr)(ubcTx)))(function (ubcTx$prime) {
                                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.ExceptT(loop(allUtxos)(ownAddr)([  ])(ubcTx$prime)))(function (nonAdaBalancedCollTx) {
                                        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(returnAdaChange(ownAddr)(allUtxos)(nonAdaBalancedCollTx))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(ReturnAdaChangeError$prime.create))))(function (unsignedTx) {
                                            return Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(logTx(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff)))(Control_Monad_Logger_Class.monadLoggerReaderT(Control_Monad_Logger_Trans.monadLoggerLoggerT(Effect_Aff.monadEffectAff)))("Post-balancing Tx ")(allUtxos)(unsignedTx))(Data_Either.Right.create));
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        }));
    });
};
module.exports = {
    Actual: Actual,
    CollateralUtxosUnavailable: CollateralUtxosUnavailable,
    InputsCannotBalanceNonAdaTokens: InputsCannotBalanceNonAdaTokens,
    BalanceNonAdaOutsCannotMinus: BalanceNonAdaOutsCannotMinus,
    "GetWalletAddressError'": GetWalletAddressError$prime,
    "GetWalletCollateralError'": GetWalletCollateralError$prime,
    "UtxosAtError'": UtxosAtError$prime,
    "ReturnAdaChangeError'": ReturnAdaChangeError$prime,
    "AddTxCollateralsError'": AddTxCollateralsError$prime,
    "GetPublicKeyTransactionInputError'": GetPublicKeyTransactionInputError$prime,
    "BalanceTxInsError'": BalanceTxInsError$prime,
    "BalanceNonAdaOutsError'": BalanceNonAdaOutsError$prime,
    "CalculateMinFeeError'": CalculateMinFeeError$prime,
    InsufficientTxInputs: InsufficientTxInputs,
    BalanceTxInsCannotMinus: BalanceTxInsCannotMinus,
    CannotMinus: CannotMinus,
    Expected: Expected,
    CannotConvertScriptOutputToTxInput: CannotConvertScriptOutputToTxInput,
    CouldNotGetNamiWalletAddress: CouldNotGetNamiWalletAddress,
    CouldNotGetNamiCollateral: CouldNotGetNamiCollateral,
    Impossible: Impossible,
    ReturnAdaChangeError: ReturnAdaChangeError,
    ReturnAdaChangeImpossibleError: ReturnAdaChangeImpossibleError,
    ReturnAdaChangeCalculateMinFee: ReturnAdaChangeCalculateMinFee,
    CouldNotGetUtxos: CouldNotGetUtxos,
    balanceTx: balanceTx,
    genericBalanceTxError: genericBalanceTxError,
    showBalanceTxError: showBalanceTxError,
    genericGetWalletAddressError: genericGetWalletAddressError,
    showGetWalletAddressError: showGetWalletAddressError,
    genericGetWalletCollateralError: genericGetWalletCollateralError,
    showGetWalletCollateralError: showGetWalletCollateralError,
    genericUtxosAtError: genericUtxosAtError,
    showUtxosAtError: showUtxosAtError,
    genericReturnAdaChangeError: genericReturnAdaChangeError,
    showReturnAdaChangeError: showReturnAdaChangeError,
    genericAddTxCollateralsError: genericAddTxCollateralsError,
    showAddTxCollateralsError: showAddTxCollateralsError,
    genericGetPublicKeyTransactionInputError: genericGetPublicKeyTransactionInputError,
    showGetPublicKeyTransactionInputError: showGetPublicKeyTransactionInputError,
    genericBalanceTxInsError: genericBalanceTxInsError,
    showBalanceTxInsError: showBalanceTxInsError,
    genericCannotMinusError: genericCannotMinusError,
    showCannotMinusError: showCannotMinusError,
    genericExpected: genericExpected,
    newtypeExpected: newtypeExpected,
    showExpected: showExpected,
    genericActual: genericActual,
    newtypeActual: newtypeActual,
    showActual: showActual,
    genericBalanceNonAdaOutsError: genericBalanceNonAdaOutsError,
    showBalanceNonAdaOutsError: showBalanceNonAdaOutsError,
    genericImpossibleError: genericImpossibleError,
    showImpossibleError: showImpossibleError
};
