// Generated by purs version 0.14.5
"use strict";
var Address = require("../Address/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var QueryM = require("../QueryM/index.js");
var Scripts = require("../Scripts/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_TypedValidator = require("../Types.TypedValidator/index.js");
var validatorHash = function ($4) {
    return Contract_Monad.wrapContract(Scripts.validatorHash($4));
};
var stakeValidatorHash = function ($5) {
    return Contract_Monad.wrapContract(Scripts.stakeValidatorHash($5));
};
var mintingPolicyHash = function ($6) {
    return Contract_Monad.wrapContract(Scripts.mintingPolicyHash($6));
};
var applyArgs = function (dictNewtype) {
    return function (dictDecodeJson) {
        return function (a) {
            var $7 = QueryM.applyArgs()(dictDecodeJson)(a);
            return function ($8) {
                return Contract_Monad.wrapContract($7($8));
            };
        };
    };
};
var applyArgsM = function (dictNewtype) {
    return function (dictDecodeJson) {
        return function (a) {
            var $9 = Data_Functor.map(Contract_Monad.functorContract)(Data_Either.hush);
            var $10 = applyArgs()(dictDecodeJson)(a);
            return function ($11) {
                return $9($10($11));
            };
        };
    };
};
module.exports = {
    applyArgs: applyArgs,
    applyArgsM: applyArgsM,
    mintingPolicyHash: mintingPolicyHash,
    stakeValidatorHash: stakeValidatorHash,
    validatorHash: validatorHash,
    enterpriseAddressMintingPolicyHash: Address.enterpriseAddressMintingPolicyHash,
    enterpriseAddressScriptHash: Address.enterpriseAddressScriptHash,
    enterpriseAddressStakeValidatorHash: Address.enterpriseAddressStakeValidatorHash,
    enterpriseAddressValidatorHash: Address.enterpriseAddressValidatorHash,
    ClientDecodeJsonError: QueryM.ClientDecodeJsonError,
    ClientEncodingError: QueryM.ClientEncodingError,
    ClientHttpError: QueryM.ClientHttpError,
    scriptHash: Scripts.scriptHash,
    typedValidatorBaseAddress: Scripts.typedValidatorBaseAddress,
    typedValidatorEnterpriseAddress: Scripts.typedValidatorEnterpriseAddress,
    validatorHashBaseAddress: Scripts.validatorHashBaseAddress,
    validatorHashEnterpriseAddress: Scripts.validatorHashEnterpriseAddress,
    ed25519KeyHashFromBech32: Serialization_Hash.ed25519KeyHashFromBech32,
    ed25519KeyHashFromBytes: Serialization_Hash.ed25519KeyHashFromBytes,
    ed25519KeyHashToBech32: Serialization_Hash.ed25519KeyHashToBech32,
    ed25519KeyHashToBech32Unsafe: Serialization_Hash.ed25519KeyHashToBech32Unsafe,
    ed25519KeyHashToBytes: Serialization_Hash.ed25519KeyHashToBytes,
    scriptHashFromBech32: Serialization_Hash.scriptHashFromBech32,
    scriptHashFromBytes: Serialization_Hash.scriptHashFromBytes,
    scriptHashToBech32: Serialization_Hash.scriptHashToBech32,
    scriptHashToBech32Unsafe: Serialization_Hash.scriptHashToBech32Unsafe,
    scriptHashToBytes: Serialization_Hash.scriptHashToBytes,
    MintingPolicy: Types_Scripts.MintingPolicy,
    MintingPolicyHash: Types_Scripts.MintingPolicyHash,
    PlutusScript: Types_Scripts.PlutusScript,
    StakeValidator: Types_Scripts.StakeValidator,
    StakeValidatorHash: Types_Scripts.StakeValidatorHash,
    Validator: Types_Scripts.Validator,
    ValidatorHash: Types_Scripts.ValidatorHash,
    TypedValidator: Types_TypedValidator.TypedValidator,
    forwardingMintingPolicy: Types_TypedValidator.forwardingMintingPolicy,
    generalise: Types_TypedValidator.generalise,
    typedValidatorHash: Types_TypedValidator.typedValidatorHash,
    typedValidatorScript: Types_TypedValidator.typedValidatorScript
};
