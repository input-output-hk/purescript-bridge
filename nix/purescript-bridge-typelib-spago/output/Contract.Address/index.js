// Generated by purs version 0.14.5
"use strict";
var Address = require("../Address/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var QueryM = require("../QueryM/index.js");
var Scripts = require("../Scripts/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Types_Aliases = require("../Types.Aliases/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_UnbalancedTransaction = require("../Types.UnbalancedTransaction/index.js");
var ownStakePubKeyHash = Contract_Monad.wrapContract(QueryM.ownStakePubKeyHash);
var ownPubKeyHash = Contract_Monad.wrapContract(QueryM.ownPubKeyHash);
var ownPaymentPubKeyHash = Contract_Monad.wrapContract(QueryM.ownPaymentPubKeyHash);
var getWalletCollateral = Contract_Monad.wrapContract(QueryM.getWalletCollateral);
var getWalletAddress = Contract_Monad.wrapContract(QueryM.getWalletAddress);
var getNetworkId = Contract_Monad.wrapContract(Address.getNetworkId);
module.exports = {
    getNetworkId: getNetworkId,
    getWalletAddress: getWalletAddress,
    getWalletCollateral: getWalletCollateral,
    ownPaymentPubKeyHash: ownPaymentPubKeyHash,
    ownPubKeyHash: ownPubKeyHash,
    ownStakePubKeyHash: ownStakePubKeyHash,
    enterpriseAddressMintingPolicyHash: Address.enterpriseAddressMintingPolicyHash,
    enterpriseAddressScriptHash: Address.enterpriseAddressScriptHash,
    enterpriseAddressStakeValidatorHash: Address.enterpriseAddressStakeValidatorHash,
    enterpriseAddressValidatorHash: Address.enterpriseAddressValidatorHash,
    typedValidatorBaseAddress: Scripts.typedValidatorBaseAddress,
    typedValidatorEnterpriseAddress: Scripts.typedValidatorEnterpriseAddress,
    validatorHashBaseAddress: Scripts.validatorHashBaseAddress,
    validatorHashEnterpriseAddress: Scripts.validatorHashEnterpriseAddress,
    BlockId: Serialization_Address.BlockId,
    ByronProtocolMagic: Serialization_Address.ByronProtocolMagic,
    CertificateIndex: Serialization_Address.CertificateIndex,
    MainnetId: Serialization_Address.MainnetId,
    TestnetId: Serialization_Address.TestnetId,
    Slot: Serialization_Address.Slot,
    TransactionIndex: Serialization_Address.TransactionIndex,
    Ed25519Signature: Types_Transaction.Ed25519Signature,
    PublicKey: Types_Transaction.PublicKey,
    RequiredSigner: Types_Transaction.RequiredSigner,
    Vkey: Types_Transaction.Vkey,
    Vkeywitness: Types_Transaction.Vkeywitness,
    PaymentPubKey: Types_UnbalancedTransaction.PaymentPubKey,
    PaymentPubKeyHash: Types_UnbalancedTransaction.PaymentPubKeyHash,
    PubKeyHash: Types_UnbalancedTransaction.PubKeyHash,
    ScriptOutput: Types_UnbalancedTransaction.ScriptOutput,
    StakePubKeyHash: Types_UnbalancedTransaction.StakePubKeyHash,
    payPubKeyHashBaseAddress: Types_UnbalancedTransaction.payPubKeyHashBaseAddress,
    payPubKeyHashEnterpriseAddress: Types_UnbalancedTransaction.payPubKeyHashEnterpriseAddress,
    payPubKeyHashRewardAddress: Types_UnbalancedTransaction.payPubKeyHashRewardAddress,
    payPubKeyRequiredSigner: Types_UnbalancedTransaction.payPubKeyRequiredSigner,
    payPubKeyVkey: Types_UnbalancedTransaction.payPubKeyVkey,
    pubKeyHashBaseAddress: Types_UnbalancedTransaction.pubKeyHashBaseAddress,
    pubKeyHashEnterpriseAddress: Types_UnbalancedTransaction.pubKeyHashEnterpriseAddress,
    stakePubKeyHashRewardAddress: Types_UnbalancedTransaction.stakePubKeyHashRewardAddress
};
