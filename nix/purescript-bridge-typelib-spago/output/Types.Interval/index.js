// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_UInt = require("../Data.UInt/index.js");
var Helpers = require("../Helpers/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var POSIXTime = function (x) {
    return x;
};
var SlotConfig = function (x) {
    return x;
};
var NegInf = (function () {
    function NegInf() {

    };
    NegInf.value = new NegInf();
    return NegInf;
})();
var Finite = (function () {
    function Finite(value0) {
        this.value0 = value0;
    };
    Finite.create = function (value0) {
        return new Finite(value0);
    };
    return Finite;
})();
var PosInf = (function () {
    function PosInf() {

    };
    PosInf.value = new PosInf();
    return PosInf;
})();
var LowerBound = (function () {
    function LowerBound(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    LowerBound.create = function (value0) {
        return function (value1) {
            return new LowerBound(value0, value1);
        };
    };
    return LowerBound;
})();
var UpperBound = (function () {
    function UpperBound(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    UpperBound.create = function (value0) {
        return function (value1) {
            return new UpperBound(value0, value1);
        };
    };
    return UpperBound;
})();
var Interval = function (x) {
    return x;
};
var semiringPOSIXTime = Data_BigInt.semiringBigInt;
var ordPOSIXTime = Data_BigInt.ordBigInt;
var newtypePOSIXTime_ = {
    Coercible0: function () {
        return undefined;
    }
};
var genericUpperBound_ = {
    to: function (x) {
        return new UpperBound(x.value0, x.value1);
    },
    from: function (x) {
        return new Data_Generic_Rep.Product(x.value0, x.value1);
    }
};
var genericSlotConfig_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericPOSIXTime_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showPOSIXTime = {
    show: Data_Show_Generic.genericShow(genericPOSIXTime_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_BigInt.showBigInt))({
        reflectSymbol: function () {
            return "POSIXTime";
        }
    }))
};
var showSlotConfig = {
    show: Data_Show_Generic.genericShow(genericSlotConfig_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "slotLength";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "slotZeroTime";
        }
    })(Data_Show.showRecordFieldsNil)(showPOSIXTime))(Data_BigInt.showBigInt))))({
        reflectSymbol: function () {
            return "SlotConfig";
        }
    }))
};
var genericLowerBound_ = {
    to: function (x) {
        return new LowerBound(x.value0, x.value1);
    },
    from: function (x) {
        return new Data_Generic_Rep.Product(x.value0, x.value1);
    }
};
var genericInterval_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericExtended_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return NegInf.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new Finite(x.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
            return PosInf.value;
        };
        throw new Error("Failed pattern match at Types.Interval (line 74, column 1 - line 74, column 39): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof NegInf) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof Finite) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        };
        if (x instanceof PosInf) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value));
        };
        throw new Error("Failed pattern match at Types.Interval (line 74, column 1 - line 74, column 39): " + [ x.constructor.name ]);
    }
};
var showExtended = function (dictShow) {
    return {
        show: Data_Show_Generic.genericShow(genericExtended_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
            reflectSymbol: function () {
                return "NegInf";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(dictShow))({
            reflectSymbol: function () {
                return "Finite";
            }
        }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
            reflectSymbol: function () {
                return "PosInf";
            }
        }))))
    };
};
var showLowerBound = function (dictShow) {
    return {
        show: Data_Show_Generic.genericShow(genericLowerBound_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showExtended(dictShow)))(Data_Show_Generic.genericShowArgsArgument(Data_Show.showBoolean)))({
            reflectSymbol: function () {
                return "LowerBound";
            }
        }))
    };
};
var showUpperBound = function (dictShow) {
    return {
        show: Data_Show_Generic.genericShow(genericUpperBound_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showExtended(dictShow)))(Data_Show_Generic.genericShowArgsArgument(Data_Show.showBoolean)))({
            reflectSymbol: function () {
                return "UpperBound";
            }
        }))
    };
};
var showInterval = function (dictShow) {
    return {
        show: Data_Show_Generic.genericShow(genericInterval_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "from";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "to";
            }
        })(Data_Show.showRecordFieldsNil)(showUpperBound(dictShow)))(showLowerBound(dictShow)))))({
            reflectSymbol: function () {
                return "Interval";
            }
        }))
    };
};
var functorExtended = {
    map: function (f) {
        return function (m) {
            if (m instanceof NegInf) {
                return NegInf.value;
            };
            if (m instanceof Finite) {
                return new Finite(f(m.value0));
            };
            if (m instanceof PosInf) {
                return PosInf.value;
            };
            throw new Error("Failed pattern match at Types.Interval (line 78, column 1 - line 78, column 33): " + [ m.constructor.name ]);
        };
    }
};
var functorLowerBound = {
    map: function (f) {
        return function (m) {
            return new LowerBound(Data_Functor.map(functorExtended)(f)(m.value0), m.value1);
        };
    }
};
var functorUpperBound = {
    map: function (f) {
        return function (m) {
            return new UpperBound(Data_Functor.map(functorExtended)(f)(m.value0), m.value1);
        };
    }
};
var functorInterval = {
    map: function (f) {
        return function (m) {
            return {
                from: Data_Functor.map(functorLowerBound)(f)(m.from),
                to: Data_Functor.map(functorUpperBound)(f)(m.to)
            };
        };
    }
};
var eqPOSIXTime = Data_BigInt.eqBigInt;
var eqSlotConfig = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "slotZeroTime";
    }
})(eqPOSIXTime))()({
    reflectSymbol: function () {
        return "slotLength";
    }
})(Data_BigInt.eqBigInt));
var eqExtended = function (dictEq) {
    return {
        eq: function (x) {
            return function (y) {
                if (x instanceof NegInf && y instanceof NegInf) {
                    return true;
                };
                if (x instanceof Finite && y instanceof Finite) {
                    return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                };
                if (x instanceof PosInf && y instanceof PosInf) {
                    return true;
                };
                return false;
            };
        }
    };
};
var eqLowerBound = function (dictEq) {
    return {
        eq: function (x) {
            return function (y) {
                return Data_Eq.eq(eqExtended(dictEq))(x.value0)(y.value0) && x.value1 === y.value1;
            };
        }
    };
};
var eqUpperBound = function (dictEq) {
    return {
        eq: function (x) {
            return function (y) {
                return Data_Eq.eq(eqExtended(dictEq))(x.value0)(y.value0) && x.value1 === y.value1;
            };
        }
    };
};
var eqInterval = function (dictEq) {
    return Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
        reflectSymbol: function () {
            return "to";
        }
    })(eqUpperBound(dictEq)))()({
        reflectSymbol: function () {
            return "from";
        }
    })(eqLowerBound(dictEq)));
};
var ordExtended = function (dictOrd) {
    return {
        compare: function (x) {
            return function (y) {
                if (x instanceof NegInf && y instanceof NegInf) {
                    return Data_Ordering.EQ.value;
                };
                if (x instanceof NegInf) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof NegInf) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof Finite && y instanceof Finite) {
                    return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                };
                if (x instanceof Finite) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof Finite) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof PosInf && y instanceof PosInf) {
                    return Data_Ordering.EQ.value;
                };
                throw new Error("Failed pattern match at Types.Interval (line 77, column 1 - line 77, column 42): " + [ x.constructor.name, y.constructor.name ]);
            };
        },
        Eq0: function () {
            return eqExtended(dictOrd.Eq0());
        }
    };
};
var ordLowerBound = function (dictOrd) {
    return {
        compare: function (v) {
            return function (v1) {
                var v3 = Data_Ord.compare(ordExtended(dictOrd))(v.value0)(v1.value0);
                if (v3 instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v3 instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                if (v3 instanceof Data_Ordering.EQ) {
                    return Data_Ord.compare(Data_Ord.ordBoolean)(v1.value1)(v.value1);
                };
                throw new Error("Failed pattern match at Types.Interval (line 96, column 53 - line 101, column 28): " + [ v3.constructor.name ]);
            };
        },
        Eq0: function () {
            return eqLowerBound(dictOrd.Eq0());
        }
    };
};
var ordUpperBound = function (dictOrd) {
    return {
        compare: function (x) {
            return function (y) {
                var v = Data_Ord.compare(ordExtended(dictOrd))(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(Data_Ord.ordBoolean)(x.value1)(y.value1);
            };
        },
        Eq0: function () {
            return eqUpperBound(dictOrd.Eq0());
        }
    };
};
var upperBound = function (a) {
    return new UpperBound(new Finite(a), true);
};
var strictUpperBound = function (a) {
    return new UpperBound(new Finite(a), false);
};
var strictLowerBound = function (a) {
    return new LowerBound(new Finite(a), false);
};
var slotToBeginPOSIXTime = function (v) {
    return function (v1) {
        var msAfterBegin = Data_Semiring.mul(Data_BigInt.semiringBigInt)(Helpers.uIntToBigInt(v1))(v.slotLength);
        return POSIXTime(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Newtype.unwrap()(v.slotZeroTime))(msAfterBegin));
    };
};
var slotToEndPOSIXTime = function (v) {
    return function (slot) {
        return Data_Semiring.add(semiringPOSIXTime)(slotToBeginPOSIXTime(v)(slot))(Data_Ring.sub(Data_BigInt.ringBigInt)(v.slotLength)(Data_Semiring.one(Data_BigInt.semiringBigInt)));
    };
};
var slotRangeToPOSIXTimeRange = function (sc) {
    return function (v) {
        var ubound = Data_Functor.map(functorExtended)((function () {
            if (v.to.value1) {
                return slotToEndPOSIXTime(sc);
            };
            return slotToBeginPOSIXTime(sc);
        })())(v.to.value0);
        var lbound = Data_Functor.map(functorExtended)((function () {
            if (v.from.value1) {
                return slotToBeginPOSIXTime(sc);
            };
            return slotToEndPOSIXTime(sc);
        })())(v.from.value0);
        return {
            from: new LowerBound(lbound, v.from.value1),
            to: new UpperBound(ubound, v.to.value1)
        };
    };
};
var posixTimeToEnclosingSlot = function (v) {
    return function (v1) {
        var timePassed = Data_Ring.sub(Data_BigInt.ringBigInt)(v1)(Data_Newtype.unwrap()(v.slotZeroTime));
        var slotsPassed = Data_BigInt.quot(timePassed)(v.slotLength);
        return Data_Functor.map(Data_Maybe.functorMaybe)(Serialization_Address.Slot)(Helpers.bigIntToUInt(slotsPassed));
    };
};
var mkInterval = function (from$prime) {
    return function (to$prime) {
        return {
            from: from$prime,
            to: to$prime
        };
    };
};
var never = mkInterval(new LowerBound(PosInf.value, true))(new UpperBound(NegInf.value, true));
var to = function (s) {
    return mkInterval(new LowerBound(NegInf.value, true))(upperBound(s));
};
var maxSlot = Serialization_Address.Slot(Data_Maybe.fromJust()(Data_UInt.fromString("4294967295")));
var slotRangeToTransactionSlot = function (v) {
    var validityStartInterval = (function () {
        if (v.from.value0 instanceof Finite && v.from.value1) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.from.value0.value0);
        };
        if (v.from.value0 instanceof Finite && !v.from.value1) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Semigroup.append(Serialization_Address.semigroupSlot)(v.from.value0.value0)(Data_Semiring.one(Data_UInt.uintSemiring)));
        };
        if (v.from.value0 instanceof NegInf) {
            return Data_Maybe.Nothing.value;
        };
        if (v.from.value0 instanceof PosInf) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(maxSlot);
        };
        throw new Error("Failed pattern match at Types.Interval (line 429, column 27 - line 433, column 30): " + [ v.from.value0.constructor.name, v.from.value1.constructor.name ]);
    })();
    var timeToLive = (function () {
        if (v.to.value0 instanceof Finite && v.to.value1) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.to.value0.value0);
        };
        if (v.to.value0 instanceof Finite && !v.to.value1) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Semigroup.append(Serialization_Address.semigroupSlot)(v.to.value0.value0)(Data_Ring.negate(Data_UInt.uintRing)(Data_Semiring.one(Data_UInt.uintSemiring))));
        };
        if (v.to.value0 instanceof NegInf) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Semiring.zero(Data_UInt.uintSemiring));
        };
        if (v.to.value0 instanceof PosInf) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Types.Interval (line 436, column 16 - line 440, column 25): " + [ v.to.value0.constructor.name, v.to.value1.constructor.name ]);
    })();
    return {
        validityStartInterval: validityStartInterval,
        timeToLive: timeToLive
    };
};
var lowerBound = function (a) {
    return new LowerBound(new Finite(a), true);
};
var isEmpty$prime = function (dictEnum) {
    return function (v) {
        var openInterval = !v.from.value1 && !v.to.value1;
        var checkEnds = function (v3) {
            return function (v4) {
                if (v3 instanceof Finite && v4 instanceof Finite) {
                    return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(Data_Maybe.ordMaybe(dictEnum.Ord0()))(Data_Enum.succ(dictEnum)(v3.value0))(new Data_Maybe.Just(v4.value0)))(Data_Ordering.EQ.value);
                };
                return false;
            };
        };
        var v3 = Data_Ord.compare(ordExtended(dictEnum.Ord0()))(v.from.value0)(v.to.value0);
        if (v3 instanceof Data_Ordering.LT) {
            if (openInterval) {
                return checkEnds(v.from.value0)(v.to.value0);
            };
            return false;
        };
        if (v3 instanceof Data_Ordering.GT) {
            return true;
        };
        if (v3 instanceof Data_Ordering.EQ) {
            return !(v.from.value1 && v.to.value1);
        };
        throw new Error("Failed pattern match at Types.Interval (line 257, column 3 - line 260, column 27): " + [ v3.constructor.name ]);
    };
};
var isEmpty = function (dictOrd) {
    return function (dictSemiring) {
        return function (v) {
            var openInterval = !v.from.value1 && !v.to.value1;
            var checkEnds = function (v3) {
                return function (v4) {
                    if (v3 instanceof Finite && v4 instanceof Finite) {
                        return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(dictOrd)(Data_Semiring.add(dictSemiring)(v3.value0)(Data_Semiring.one(dictSemiring)))(v4.value0))(Data_Ordering.EQ.value);
                    };
                    return false;
                };
            };
            var v3 = Data_Ord.compare(ordExtended(dictOrd))(v.from.value0)(v.to.value0);
            if (v3 instanceof Data_Ordering.LT) {
                if (openInterval) {
                    return checkEnds(v.from.value0)(v.to.value0);
                };
                return false;
            };
            if (v3 instanceof Data_Ordering.GT) {
                return true;
            };
            if (v3 instanceof Data_Ordering.EQ) {
                return !(v.from.value1 && v.to.value1);
            };
            throw new Error("Failed pattern match at Types.Interval (line 277, column 3 - line 280, column 27): " + [ v3.constructor.name ]);
        };
    };
};
var interval = function (s) {
    return function (s$prime) {
        return mkInterval(lowerBound(s))(upperBound(s$prime));
    };
};
var singleton = function (s) {
    return interval(s)(s);
};
var slotToPOSIXTimeRange = function (sc) {
    return function (slot) {
        return interval(slotToBeginPOSIXTime(sc)(slot))(slotToEndPOSIXTime(sc)(slot));
    };
};
var intersection = function (dictOrd) {
    return function (v) {
        return function (v1) {
            return mkInterval(Data_Ord.max(ordLowerBound(dictOrd))(v.from)(v1.from))(Data_Ord.min(ordUpperBound(dictOrd))(v.to)(v1.to));
        };
    };
};
var overlaps = function (dictOrd) {
    return function (dictSemiring) {
        return function (l) {
            return function (r) {
                return !isEmpty(dictOrd)(dictSemiring)(intersection(dictOrd)(l)(r));
            };
        };
    };
};
var overlaps$prime = function (dictEnum) {
    return function (l) {
        return function (r) {
            return !isEmpty$prime(dictEnum)(intersection(dictEnum.Ord0())(l)(r));
        };
    };
};
var meetSemilatticeInterval = function (dictOrd) {
    return {
        meet: intersection(dictOrd)
    };
};
var hull = function (dictOrd) {
    return function (v) {
        return function (v1) {
            return mkInterval(Data_Ord.min(ordLowerBound(dictOrd))(v.from)(v1.from))(Data_Ord.max(ordUpperBound(dictOrd))(v.to)(v1.to));
        };
    };
};
var joinSemilatticeInterval = function (dictOrd) {
    return {
        join: hull(dictOrd)
    };
};
var boundedJoinSemilatticeInt = function (dictOrd) {
    return {
        bottom: never,
        JoinSemilattice0: function () {
            return joinSemilatticeInterval(dictOrd);
        }
    };
};
var from = function (s) {
    return mkInterval(lowerBound(s))(new UpperBound(PosInf.value, true));
};
var contains = function (dictOrd) {
    return function (v) {
        return function (v1) {
            return Data_Ord.lessThanOrEq(ordLowerBound(dictOrd))(v.from)(v1.from) && Data_Ord.lessThanOrEq(ordUpperBound(dictOrd))(v1.to)(v.to);
        };
    };
};
var member = function (dictOrd) {
    return function (a) {
        return function (i) {
            return contains(dictOrd)(i)(singleton(a));
        };
    };
};
var posixTimeRangeToContainedSlotRange = function (sc) {
    return function (ptr) {
        var v = Data_Functor.map(functorInterval)(posixTimeToEnclosingSlot(sc))(ptr);
        var seqExtended = function (v1) {
            if (v1 instanceof Finite && v1.value0 instanceof Data_Maybe.Just) {
                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Finite(v1.value0.value0));
            };
            if (v1 instanceof Finite && v1.value0 instanceof Data_Maybe.Nothing) {
                return Data_Maybe.Nothing.value;
            };
            if (v1 instanceof NegInf) {
                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(NegInf.value);
            };
            if (v1 instanceof PosInf) {
                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(PosInf.value);
            };
            throw new Error("Failed pattern match at Types.Interval (line 396, column 19 - line 400, column 28): " + [ v1.constructor.name ]);
        };
        var closureWith = function (f) {
            return function (def) {
                return function (v1) {
                    if (v1 instanceof Finite) {
                        return member(ordPOSIXTime)(f(sc)(v1.value0))(ptr);
                    };
                    return def;
                };
            };
        };
        return Control_Bind.bind(Data_Maybe.bindMaybe)(seqExtended(v.from.value0))(function (start$prime) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(seqExtended(v.to.value0))(function (end$prime) {
                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                    from: new LowerBound(start$prime, closureWith(slotToBeginPOSIXTime)(v.from.value1)(start$prime)),
                    to: new UpperBound(end$prime, closureWith(slotToBeginPOSIXTime)(v.to.value1)(end$prime))
                });
            });
        });
    };
};
var posixTimeRangeToTransactionSlot = function (sc) {
    var $306 = Data_Functor.map(Data_Maybe.functorMaybe)(slotRangeToTransactionSlot);
    var $307 = posixTimeRangeToContainedSlotRange(sc);
    return function ($308) {
        return $306($307($308));
    };
};
var beginningOfTime = Data_Maybe.fromJust()(Data_BigInt.fromString("1596059091000"));
var defaultSlotConfig = {
    slotLength: Data_BigInt.fromInt(1000),
    slotZeroTime: beginningOfTime
};
var before = function (dictOrd) {
    return function (h) {
        return function (v) {
            return Data_Ord.lessThan(ordLowerBound(dictOrd))(lowerBound(h))(v.from);
        };
    };
};
var always = mkInterval(new LowerBound(NegInf.value, true))(new UpperBound(PosInf.value, true));
var boundedMeetSemilatticeInt = function (dictOrd) {
    return {
        top: always,
        MeetSemilattice0: function () {
            return meetSemilatticeInterval(dictOrd);
        }
    };
};
var after = function (dictOrd) {
    return function (h) {
        return function (v) {
            return Data_Ord.greaterThan(ordUpperBound(dictOrd))(upperBound(h))(v.to);
        };
    };
};
module.exports = {
    NegInf: NegInf,
    Finite: Finite,
    PosInf: PosInf,
    Interval: Interval,
    LowerBound: LowerBound,
    POSIXTime: POSIXTime,
    SlotConfig: SlotConfig,
    UpperBound: UpperBound,
    after: after,
    always: always,
    before: before,
    beginningOfTime: beginningOfTime,
    contains: contains,
    defaultSlotConfig: defaultSlotConfig,
    from: from,
    hull: hull,
    intersection: intersection,
    interval: interval,
    isEmpty: isEmpty,
    "isEmpty'": isEmpty$prime,
    lowerBound: lowerBound,
    member: member,
    mkInterval: mkInterval,
    never: never,
    overlaps: overlaps,
    "overlaps'": overlaps$prime,
    posixTimeRangeToContainedSlotRange: posixTimeRangeToContainedSlotRange,
    posixTimeRangeToTransactionSlot: posixTimeRangeToTransactionSlot,
    posixTimeToEnclosingSlot: posixTimeToEnclosingSlot,
    singleton: singleton,
    slotRangeToPOSIXTimeRange: slotRangeToPOSIXTimeRange,
    slotRangeToTransactionSlot: slotRangeToTransactionSlot,
    slotToEndPOSIXTime: slotToEndPOSIXTime,
    slotToPOSIXTimeRange: slotToPOSIXTimeRange,
    strictLowerBound: strictLowerBound,
    strictUpperBound: strictUpperBound,
    to: to,
    upperBound: upperBound,
    genericExtended_: genericExtended_,
    eqExtended: eqExtended,
    ordExtended: ordExtended,
    functorExtended: functorExtended,
    showExtended: showExtended,
    genericLowerBound_: genericLowerBound_,
    eqLowerBound: eqLowerBound,
    functorLowerBound: functorLowerBound,
    showLowerBound: showLowerBound,
    ordLowerBound: ordLowerBound,
    genericUpperBound_: genericUpperBound_,
    eqUpperBound: eqUpperBound,
    ordUpperBound: ordUpperBound,
    functorUpperBound: functorUpperBound,
    showUpperBound: showUpperBound,
    genericInterval_: genericInterval_,
    eqInterval: eqInterval,
    functorInterval: functorInterval,
    showInterval: showInterval,
    joinSemilatticeInterval: joinSemilatticeInterval,
    boundedJoinSemilatticeInt: boundedJoinSemilatticeInt,
    meetSemilatticeInterval: meetSemilatticeInterval,
    boundedMeetSemilatticeInt: boundedMeetSemilatticeInt,
    genericPOSIXTime_: genericPOSIXTime_,
    newtypePOSIXTime_: newtypePOSIXTime_,
    eqPOSIXTime: eqPOSIXTime,
    ordPOSIXTime: ordPOSIXTime,
    semiringPOSIXTime: semiringPOSIXTime,
    showPOSIXTime: showPOSIXTime,
    genericSlotConfig_: genericSlotConfig_,
    eqSlotConfig: eqSlotConfig,
    showSlotConfig: showSlotConfig
};
