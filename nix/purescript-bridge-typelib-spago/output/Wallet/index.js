// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Promise = require("../Control.Promise/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Deserialization_FromBytes = require("../Deserialization.FromBytes/index.js");
var Deserialization_UnspentOutput = require("../Deserialization.UnspentOutput/index.js");
var Deserialization_WitnessSet = require("../Deserialization.WitnessSet/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var FfiHelpers = require("../FfiHelpers/index.js");
var Helpers = require("../Helpers/index.js");
var Serialization = require("../Serialization/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Untagged_Union = require("../Untagged.Union/index.js");
var Nami = (function () {
    function Nami(value0) {
        this.value0 = value0;
    };
    Nami.create = function (value0) {
        return new Nami(value0);
    };
    return Nami;
})();
var getNamiCollateral = $foreign["_getNamiCollateral"](FfiHelpers.maybeFfiHelper);
var mkNamiWalletAff = (function () {
    var txToHex = (function () {
        var $20 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
        var $21 = Data_Functor.map(Effect.functorEffect)((function () {
            var $23 = Untagged_Union.asOneOf();
            return function ($24) {
                return Types_ByteArray.byteArrayToHex(Serialization.toBytes($23($24)));
            };
        })());
        return function ($22) {
            return $20($21(Serialization.convertTransaction($22)));
        };
    })();
    var fromNamiMaybeHexString = function (act) {
        var $25 = Data_Functor.map(Effect_Aff.functorAff)(Data_Function.flip(Control_Bind.bind(Data_Maybe.bindMaybe))(Types_ByteArray.hexToByteArray));
        return function ($26) {
            return $25(Control_Promise.toAffE(act($26)));
        };
    };
    var getCollateral = function (nami) {
        return Control_Bind.bind(Effect_Aff.bindAff)(fromNamiMaybeHexString(getNamiCollateral)(nami))(function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
            };
            if (v instanceof Data_Maybe.Just) {
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Deserialization_UnspentOutput.convertUnspentOutput)(Deserialization_FromBytes.fromBytesEffect(Deserialization_FromBytes.fromBytesTransactionUnspe)(v.value0)));
            };
            throw new Error("Failed pattern match at Wallet (line 88, column 5 - line 93, column 38): " + [ v.constructor.name ]);
        });
    };
    var fromNamiHexString = function (act) {
        var $27 = Data_Functor.map(Effect_Aff.functorAff)(Types_ByteArray.hexToByteArray);
        return function ($28) {
            return $27(Control_Promise.toAffE(act($28)));
        };
    };
    var getWalletAddress = function (nami) {
        return Data_Functor.mapFlipped(Effect_Aff.functorAff)(fromNamiHexString($foreign["_getNamiAddress"])(nami))(function (v) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(Serialization_Address.addressFromBytes);
        });
    };
    var signTx = function (nami) {
        return function (tx) {
            var combineWitnessSet = function (v) {
                return function (newWits) {
                    return Types_Transaction.Transaction({
                        body: v.body,
                        witnessSet: Data_Semigroup.append(Types_Transaction.semigroupTransactionWitne)(v.witnessSet)(newWits),
                        isValid: v.isValid,
                        auxiliaryData: v.auxiliaryData
                    });
                };
            };
            return Control_Bind.bind(Effect_Aff.bindAff)(txToHex(tx))(function (txHex) {
                return Control_Bind.bind(Effect_Aff.bindAff)(fromNamiHexString($foreign["_signTxNami"](txHex))(nami))(function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                    };
                    if (v instanceof Data_Maybe.Just) {
                        return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Maybe.functorMaybe)(combineWitnessSet(tx)))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Deserialization_WitnessSet.convertWitnessSet)(Deserialization_FromBytes.fromBytesEffect(Deserialization_FromBytes.fromBytesTransactionWitne)(v.value0))));
                    };
                    throw new Error("Failed pattern match at Wallet (line 98, column 52 - line 103, column 10): " + [ v.constructor.name ]);
                });
            });
        };
    };
    var signTxBytes = function (nami) {
        return function (txBytes) {
            return Control_Bind.bind(Effect_Aff.bindAff)(fromNamiHexString($foreign["_signTxNami"](Types_ByteArray.byteArrayToHex(txBytes)))(nami))(function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                };
                if (v instanceof Data_Maybe.Just) {
                    return Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.Just.create)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)($foreign["_attachSignature"](txBytes)(v.value0)));
                };
                throw new Error("Failed pattern match at Wallet (line 113, column 71 - line 115, column 79): " + [ v.constructor.name ]);
            });
        };
    };
    var submitTx = function (nami) {
        return function (tx) {
            return Control_Bind.bind(Effect_Aff.bindAff)(txToHex(tx))(function (txHex) {
                return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Maybe.functorMaybe)(Types_Transaction.TransactionHash))(fromNamiHexString($foreign["_submitTxNami"](txHex))(nami));
            });
        };
    };
    var enable = Control_Promise.toAffE($foreign["_enableNami"]);
    return Control_Bind.bind(Effect_Aff.bindAff)(enable)(function (nami) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](nami)))(function (connection) {
            return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Nami({
                connection: connection,
                getWalletAddress: getWalletAddress,
                getCollateral: getCollateral,
                signTx: signTx,
                signTxBytes: signTxBytes,
                submitTx: submitTx
            }));
        });
    });
})();
var dummySign = function (v) {
    var vk = new Data_Tuple.Tuple("ed25519_pk1eamrnx3pph58yr5l4z2wghjpu2dt2f0rp0zq9qquqa39p52ct0xsudjp4e", "ed25519_sig1ynufn5umzl746ekpjtzt2rf58ep0wg6mxpgyezh8vx0e8jpgm3kuu3tgm453wlz4rq5yjtth0fnj0ltxctaue0dgc2hwmysr9jvhjzswt86uk");
    return Data_Newtype.over()()(Types_Transaction.Transaction)(function (v1) {
        return {
            witnessSet: Data_Newtype.over()()(Types_Transaction.TransactionWitnessSet)(function (v2) {
                return {
                    vkeys: Helpers.maybeArrayMerge(Types_Transaction.eqVkeywitness)(v.witnessSet.vkeys)(new Data_Maybe.Just([ vk ])),
                    bootstraps: v2.bootstraps,
                    nativeScripts: v2.nativeScripts,
                    plutusData: v2.plutusData,
                    plutusScripts: v2.plutusScripts,
                    redeemers: v2.redeemers
                };
            })(v.witnessSet),
            auxiliaryData: v1.auxiliaryData,
            body: v1.body,
            isValid: v1.isValid
        };
    })(v);
};
module.exports = {
    Nami: Nami,
    mkNamiWalletAff: mkNamiWalletAff,
    dummySign: dummySign
};
